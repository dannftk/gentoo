diff -Naur exiv2-0.27.2-Source/cmake/mainSetup.cmake exiv2-0.27.2-Source.new/cmake/mainSetup.cmake
--- exiv2-0.27.2-Source/cmake/mainSetup.cmake	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/cmake/mainSetup.cmake	2020-02-12 17:57:34.467745314 +0300
@@ -18,9 +18,9 @@
     set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)
 endif()
 
-set(CMAKE_CXX_STANDARD 98)
+set(CMAKE_CXX_STANDARD 11)
 set(CMAKE_CXX_STANDARD_REQUIRED ON)
-set(CMAKE_CXX_EXTENSIONS ON)
+set(CMAKE_CXX_EXTENSIONS OFF)
 
 if (UNIX)
     if (APPLE)
diff -Naur exiv2-0.27.2-Source/contrib/organize/MD5.cpp exiv2-0.27.2-Source.new/contrib/organize/MD5.cpp
--- exiv2-0.27.2-Source/contrib/organize/MD5.cpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/contrib/organize/MD5.cpp	2020-02-12 17:50:41.153271483 +0300
@@ -153,7 +153,7 @@
 void
 MD5Transform(UWORD32 buf[4], UWORD32 const in[16])
 {
-	register UWORD32 a, b, c, d;
+	UWORD32 a, b, c, d;
 
 	a = buf[0];
 	b = buf[1];
diff -Naur exiv2-0.27.2-Source/contrib/organize/organize.cpp exiv2-0.27.2-Source.new/contrib/organize/organize.cpp
--- exiv2-0.27.2-Source/contrib/organize/organize.cpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/contrib/organize/organize.cpp	2020-02-12 16:32:56.692487486 +0300
@@ -250,7 +250,7 @@
 {
     std::string dest;
 
-    Exiv2::Image::AutoPtr image;
+    Exiv2::Image::UniquePtr image;
     try {
         image = Exiv2::ImageFactory::open(source_file.string());
         image->readMetadata();
diff -Naur exiv2-0.27.2-Source/include/exiv2/asfvideo.hpp exiv2-0.27.2-Source.new/include/exiv2/asfvideo.hpp
--- exiv2-0.27.2-Source/include/exiv2/asfvideo.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/asfvideo.hpp	2020-02-12 16:32:56.766488079 +0300
@@ -62,7 +62,7 @@
               instance after it is passed to this method. Use the Image::io()
               method to get a temporary reference.
          */
-        AsfVideo(BasicIo::AutoPtr io);
+        AsfVideo(BasicIo::UniquePtr io);
         //@}
 
         //! @name Manipulators
@@ -169,7 +169,7 @@
           Caller owns the returned object and the auto-pointer ensures that
           it will be deleted.
      */
-    EXIV2LIB_DEPRECATED_EXPORT Image::AutoPtr newAsfInstance(BasicIo::AutoPtr io, bool create);
+    EXIV2LIB_DEPRECATED_EXPORT Image::UniquePtr newAsfInstance(BasicIo::UniquePtr io, bool create);
 
     //! Check if the file iIo is a Windows Asf Video.
     EXIV2LIB_DEPRECATED_EXPORT bool isAsfType(BasicIo& iIo, bool advance);
diff -Naur exiv2-0.27.2-Source/include/exiv2/basicio.hpp exiv2-0.27.2-Source.new/include/exiv2/basicio.hpp
--- exiv2-0.27.2-Source/include/exiv2/basicio.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/basicio.hpp	2020-02-12 17:08:43.245966256 +0300
@@ -30,7 +30,7 @@
 #include "types.hpp"
 
 // + standard includes
-#include <memory>       // for std::auto_ptr
+#include <memory>       // for std::unique_ptr
 
 // The way to handle data from stdin or data uri path. If EXV_XPATH_MEMIO = 1,
 // it uses MemIo. Otherwises, it uses FileIo.
@@ -54,8 +54,8 @@
      */
     class EXIV2API BasicIo {
     public:
-        //! BasicIo auto_ptr type
-        typedef std::auto_ptr<BasicIo> AutoPtr;
+        //! BasicIo unique_ptr type
+        typedef std::unique_ptr<BasicIo> UniquePtr;
 
         //! Seek starting positions
         enum Position { beg, cur, end };
@@ -521,7 +521,7 @@
 
         // Pimpl idiom
         class Impl;
-        std::auto_ptr<Impl> p_;
+        std::unique_ptr<Impl> p_;
 
     }; // class FileIo
 
@@ -721,7 +721,7 @@
 
         // Pimpl idiom
         class Impl;
-        std::auto_ptr<Impl> p_;
+        std::unique_ptr<Impl> p_;
 
     }; // class MemIo
 
diff -Naur exiv2-0.27.2-Source/include/exiv2/bigtiffimage.hpp exiv2-0.27.2-Source.new/include/exiv2/bigtiffimage.hpp
--- exiv2-0.27.2-Source/include/exiv2/bigtiffimage.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/bigtiffimage.hpp	2020-02-12 16:32:56.852488769 +0300
@@ -10,7 +10,7 @@
     const int bigtiff = 25;
 }
 
-Image::AutoPtr newBigTiffInstance(BasicIo::AutoPtr, bool);
+Image::UniquePtr newBigTiffInstance(BasicIo::UniquePtr, bool);
 bool isBigTiffType(BasicIo &, bool);
 
 }
diff -Naur exiv2-0.27.2-Source/include/exiv2/bmpimage.hpp exiv2-0.27.2-Source.new/include/exiv2/bmpimage.hpp
--- exiv2-0.27.2-Source/include/exiv2/bmpimage.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/bmpimage.hpp	2020-02-12 16:32:56.897489129 +0300
@@ -73,7 +73,7 @@
               instance after it is passed to this method.  Use the Image::io()
               method to get a temporary reference.
          */
-        explicit BmpImage(BasicIo::AutoPtr io);
+        explicit BmpImage(BasicIo::UniquePtr io);
         //@}
 
         //! @name Manipulators
@@ -118,7 +118,7 @@
              Caller owns the returned object and the auto-pointer ensures that
              it will be deleted.
      */
-    EXIV2API Image::AutoPtr newBmpInstance(BasicIo::AutoPtr io, bool create);
+    EXIV2API Image::UniquePtr newBmpInstance(BasicIo::UniquePtr io, bool create);
 
     //! Check if the file iIo is a Windows Bitmap image.
     EXIV2API bool isBmpType(BasicIo& iIo, bool advance);
diff -Naur exiv2-0.27.2-Source/include/exiv2/cr2image.hpp exiv2-0.27.2-Source.new/include/exiv2/cr2image.hpp
--- exiv2-0.27.2-Source/include/exiv2/cr2image.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/cr2image.hpp	2020-02-12 16:32:56.942489490 +0300
@@ -68,7 +68,7 @@
           @param create Specifies if an existing image should be read (false)
               or if a new file should be created (true).
          */
-        Cr2Image(BasicIo::AutoPtr io, bool create);
+        Cr2Image(BasicIo::UniquePtr io, bool create);
         //@}
 
         //! @name Manipulators
@@ -152,7 +152,7 @@
              Caller owns the returned object and the auto-pointer ensures that
              it will be deleted.
      */
-    EXIV2API Image::AutoPtr newCr2Instance(BasicIo::AutoPtr io, bool create);
+    EXIV2API Image::UniquePtr newCr2Instance(BasicIo::UniquePtr io, bool create);
 
     //! Check if the file iIo is a CR2 image.
     EXIV2API bool isCr2Type(BasicIo& iIo, bool advance);
diff -Naur exiv2-0.27.2-Source/include/exiv2/crwimage.hpp exiv2-0.27.2-Source.new/include/exiv2/crwimage.hpp
--- exiv2-0.27.2-Source/include/exiv2/crwimage.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/crwimage.hpp	2020-02-12 16:32:56.987489850 +0300
@@ -75,7 +75,7 @@
           @param create Specifies if an existing image should be read (false)
               or if a new file should be created (true).
          */
-        CrwImage(BasicIo::AutoPtr io, bool create);
+        CrwImage(BasicIo::UniquePtr io, bool create);
         //@}
 
         //! @name Manipulators
@@ -161,7 +161,7 @@
              Caller owns the returned object and the auto-pointer ensures that
              it will be deleted.
      */
-    EXIV2API Image::AutoPtr newCrwInstance(BasicIo::AutoPtr io, bool create);
+    EXIV2API Image::UniquePtr newCrwInstance(BasicIo::UniquePtr io, bool create);
 
     //! Check if the file iIo is a CRW image.
     EXIV2API bool isCrwType(BasicIo& iIo, bool advance);
diff -Naur exiv2-0.27.2-Source/include/exiv2/datasets.hpp exiv2-0.27.2-Source.new/include/exiv2/datasets.hpp
--- exiv2-0.27.2-Source/include/exiv2/datasets.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/datasets.hpp	2020-02-12 16:32:57.062490450 +0300
@@ -275,7 +275,7 @@
     class EXIV2API IptcKey : public Key {
     public:
         //! Shortcut for an %IptcKey auto pointer.
-        typedef std::auto_ptr<IptcKey> AutoPtr;
+        typedef std::unique_ptr<IptcKey> UniquePtr;
 
         //! @name Creators
         //@{
@@ -320,7 +320,7 @@
         virtual std::string tagName() const;
         virtual std::string tagLabel() const;
         virtual uint16_t tag() const;
-        AutoPtr clone() const;
+        UniquePtr clone() const;
         //! Return the name of the record
         std::string recordName() const;
         //! Return the record id
diff -Naur exiv2-0.27.2-Source/include/exiv2/epsimage.hpp exiv2-0.27.2-Source.new/include/exiv2/epsimage.hpp
--- exiv2-0.27.2-Source/include/exiv2/epsimage.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/epsimage.hpp	2020-02-12 16:32:57.156491203 +0300
@@ -74,7 +74,7 @@
           @param create Specifies if an existing image should be read (false)
               or if a new file should be created (true).
          */
-        EpsImage(BasicIo::AutoPtr io, bool create);
+        EpsImage(BasicIo::UniquePtr io, bool create);
         //@}
 
         //! @name Manipulators
@@ -114,7 +114,7 @@
              Caller owns the returned object and the auto-pointer ensures that
              it will be deleted.
      */
-    EXIV2LIB_DEPRECATED_EXPORT Image::AutoPtr newEpsInstance(BasicIo::AutoPtr io, bool create);
+    EXIV2LIB_DEPRECATED_EXPORT Image::UniquePtr newEpsInstance(BasicIo::UniquePtr io, bool create);
 
     //! Check if the file iIo is a EPS image.
     EXIV2LIB_DEPRECATED_EXPORT bool isEpsType(BasicIo& iIo, bool advance);
diff -Naur exiv2-0.27.2-Source/include/exiv2/exif.hpp exiv2-0.27.2-Source.new/include/exiv2/exif.hpp
--- exiv2-0.27.2-Source/include/exiv2/exif.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/exif.hpp	2020-02-12 16:32:57.250491955 +0300
@@ -192,7 +192,7 @@
         long toLong(long n =0) const;
         float toFloat(long n =0) const;
         Rational toRational(long n =0) const;
-        Value::AutoPtr getValue() const;
+        Value::UniquePtr getValue() const;
         const Value& value() const;
         //! Return the size of the data area.
         long sizeDataArea() const;
@@ -213,8 +213,8 @@
 
     private:
         // DATA
-        ExifKey::AutoPtr key_;                  //!< Key
-        Value::AutoPtr   value_;                //!< Value
+        ExifKey::UniquePtr key_;                  //!< Key
+        Value::UniquePtr   value_;                //!< Value
 
     }; // class Exifdatum
 
diff -Naur exiv2-0.27.2-Source/include/exiv2/gifimage.hpp exiv2-0.27.2-Source.new/include/exiv2/gifimage.hpp
--- exiv2-0.27.2-Source/include/exiv2/gifimage.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/gifimage.hpp	2020-02-12 16:32:57.341492684 +0300
@@ -74,7 +74,7 @@
               instance after it is passed to this method.  Use the Image::io()
               method to get a temporary reference.
          */
-        explicit GifImage(BasicIo::AutoPtr io);
+        explicit GifImage(BasicIo::UniquePtr io);
         //@}
 
         //! @name Manipulators
@@ -119,7 +119,7 @@
              Caller owns the returned object and the auto-pointer ensures that
              it will be deleted.
      */
-    EXIV2API Image::AutoPtr newGifInstance(BasicIo::AutoPtr io, bool create);
+    EXIV2API Image::UniquePtr newGifInstance(BasicIo::UniquePtr io, bool create);
 
     //! Check if the file iIo is a GIF image.
     EXIV2API bool isGifType(BasicIo& iIo, bool advance);
diff -Naur exiv2-0.27.2-Source/include/exiv2/image.hpp exiv2-0.27.2-Source.new/include/exiv2/image.hpp
--- exiv2-0.27.2-Source/include/exiv2/image.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/image.hpp	2020-02-12 17:08:38.159945994 +0300
@@ -80,8 +80,8 @@
      */
     class EXIV2API Image {
     public:
-        //! Image auto_ptr type
-        typedef std::auto_ptr<Image> AutoPtr;
+        //! Image unique_ptr type
+        typedef std::unique_ptr<Image> UniquePtr;
 
         //! @name Creators
         //@{
@@ -92,7 +92,7 @@
          */
         Image(int              imageType,
               uint16_t         supportedMetadata,
-              BasicIo::AutoPtr io);
+              BasicIo::UniquePtr io);
         //! Virtual Destructor
         virtual ~Image();
         //@}
@@ -484,7 +484,7 @@
 
     protected:
         // DATA
-        BasicIo::AutoPtr  io_;                //!< Image data IO pointer
+        BasicIo::UniquePtr  io_;                //!< Image data IO pointer
         ExifData          exifData_;          //!< Exif data container
         IptcData          iptcData_;          //!< IPTC data container
         XmpData           xmpData_;           //!< XMP data container
@@ -522,7 +522,7 @@
     }; // class Image
 
     //! Type for function pointer that creates new Image instances
-    typedef Image::AutoPtr (*NewInstanceFct)(BasicIo::AutoPtr io, bool create);
+    typedef Image::UniquePtr (*NewInstanceFct)(BasicIo::UniquePtr io, bool create);
     //! Type for function pointer that checks image types
     typedef bool (*IsThisTypeFct)(BasicIo& iIo, bool advance);
 
@@ -548,13 +548,13 @@
           @throw Error If the file is not found or it is unable to connect to the server to
                 read the remote file.
          */
-        static BasicIo::AutoPtr createIo(const std::string& path, bool useCurl = true);
+        static BasicIo::UniquePtr createIo(const std::string& path, bool useCurl = true);
 #ifdef EXV_UNICODE_PATH
         /*!
           @brief Like createIo() but accepts a unicode path in an std::wstring.
           @note This function is only available on Windows.
          */
-        static BasicIo::AutoPtr createIo(const std::wstring& wpath, bool useCurl = true);
+        static BasicIo::UniquePtr createIo(const std::wstring& wpath, bool useCurl = true);
 #endif
         /*!
           @brief Create an Image subclass of the appropriate type by reading
@@ -569,13 +569,13 @@
           @throw Error If opening the file fails or it contains data of an
               unknown image type.
          */
-        static Image::AutoPtr open(const std::string& path, bool useCurl = true);
+        static Image::UniquePtr open(const std::string& path, bool useCurl = true);
 #ifdef EXV_UNICODE_PATH
         /*!
           @brief Like open() but accepts a unicode path in an std::wstring.
           @note This function is only available on Windows.
          */
-        static Image::AutoPtr open(const std::wstring& wpath, bool useCurl = true);
+        static Image::UniquePtr open(const std::wstring& wpath, bool useCurl = true);
 #endif
         /*!
           @brief Create an Image subclass of the appropriate type by reading
@@ -588,7 +588,7 @@
               matches that of the data buffer.
           @throw Error If the memory contains data of an unknown image type.
          */
-        static Image::AutoPtr open(const byte* data, long size);
+        static Image::UniquePtr open(const byte* data, long size);
         /*!
           @brief Create an Image subclass of the appropriate type by reading
               the provided BasicIo instance. %Image type is derived from the
@@ -606,7 +606,7 @@
               determined, the pointer is 0.
           @throw Error If opening the BasicIo fails
          */
-        static Image::AutoPtr open(BasicIo::AutoPtr io);
+        static Image::UniquePtr open(BasicIo::UniquePtr io);
         /*!
           @brief Create an Image subclass of the requested type by creating a
               new image file. If the file already exists, it will be overwritten.
@@ -616,13 +616,13 @@
               type.
           @throw Error If the image type is not supported.
          */
-        static Image::AutoPtr create(int type, const std::string& path);
+        static Image::UniquePtr create(int type, const std::string& path);
 #ifdef EXV_UNICODE_PATH
         /*!
           @brief Like create() but accepts a unicode path in an std::wstring.
           @note This function is only available on Windows.
          */
-        static Image::AutoPtr create(int type, const std::wstring& wpath);
+        static Image::UniquePtr create(int type, const std::wstring& wpath);
 #endif
         /*!
           @brief Create an Image subclass of the requested type by creating a
@@ -632,7 +632,7 @@
               type.
           @throw Error If the image type is not supported
          */
-        static Image::AutoPtr create(int type);
+        static Image::UniquePtr create(int type);
         /*!
           @brief Create an Image subclass of the requested type by writing a
               new image to a BasicIo instance. If the BasicIo instance already
@@ -647,7 +647,7 @@
           @return An auto-pointer that owns an Image instance of the requested
               type. If the image type is not supported, the pointer is 0.
          */
-        static Image::AutoPtr create(int type, BasicIo::AutoPtr io);
+        static Image::UniquePtr create(int type, BasicIo::UniquePtr io);
         /*!
           @brief Returns the image type of the provided file.
           @param path %Image file. The contents of the file are tested to
diff -Naur exiv2-0.27.2-Source/include/exiv2/iptc.hpp exiv2-0.27.2-Source.new/include/exiv2/iptc.hpp
--- exiv2-0.27.2-Source/include/exiv2/iptc.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/iptc.hpp	2020-02-12 16:32:57.498493940 +0300
@@ -145,14 +145,14 @@
         long toLong(long n =0) const;
         float toFloat(long n =0) const;
         Rational toRational(long n =0) const;
-        Value::AutoPtr getValue() const;
+        Value::UniquePtr getValue() const;
         const Value& value() const;
         //@}
 
     private:
         // DATA
-        IptcKey::AutoPtr key_;                  //!< Key
-        Value::AutoPtr   value_;                //!< Value
+        IptcKey::UniquePtr key_;                  //!< Key
+        Value::UniquePtr   value_;                //!< Value
 
     }; // class Iptcdatum
 
diff -Naur exiv2-0.27.2-Source/include/exiv2/jp2image.hpp exiv2-0.27.2-Source.new/include/exiv2/jp2image.hpp
--- exiv2-0.27.2-Source/include/exiv2/jp2image.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/jp2image.hpp	2020-02-12 16:32:57.585494637 +0300
@@ -66,7 +66,7 @@
           @param create Specifies if an existing image should be read (false)
               or if a new file should be created (true).
          */
-        Jp2Image(BasicIo::AutoPtr io, bool create);
+        Jp2Image(BasicIo::UniquePtr io, bool create);
         //@}
 
         //! @name Manipulators
@@ -130,7 +130,7 @@
              Caller owns the returned object and the auto-pointer ensures that
              it will be deleted.
      */
-    EXIV2API Image::AutoPtr newJp2Instance(BasicIo::AutoPtr io, bool create);
+    EXIV2API Image::UniquePtr newJp2Instance(BasicIo::UniquePtr io, bool create);
 
     //! Check if the file iIo is a JPEG-2000 image.
     EXIV2API bool isJp2Type(BasicIo& iIo, bool advance);
diff -Naur exiv2-0.27.2-Source/include/exiv2/jpgimage.hpp exiv2-0.27.2-Source.new/include/exiv2/jpgimage.hpp
--- exiv2-0.27.2-Source/include/exiv2/jpgimage.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/jpgimage.hpp	2020-02-12 16:32:57.672495333 +0300
@@ -179,7 +179,7 @@
           @param dataSize Size of initData in bytes.
          */
         JpegBase(int              type,
-                 BasicIo::AutoPtr io,
+                 BasicIo::UniquePtr io,
                  bool             create,
                  const byte       initData[],
                  long             dataSize);
@@ -318,7 +318,7 @@
           @param create Specifies if an existing image should be read (false)
               or if a new file should be created (true).
          */
-        JpegImage(BasicIo::AutoPtr io, bool create);
+        JpegImage(BasicIo::UniquePtr io, bool create);
         //@}
         //! @name Accessors
         //@{
@@ -379,7 +379,7 @@
           @param create Specifies if an existing image should be read (false)
                  or if a new file should be created (true).
          */
-        ExvImage(BasicIo::AutoPtr io, bool create);
+        ExvImage(BasicIo::UniquePtr io, bool create);
         //@}
         //! @name Accessors
         //@{
@@ -421,7 +421,7 @@
              Caller owns the returned object and the auto-pointer ensures that
              it will be deleted.
      */
-    EXIV2API Image::AutoPtr newJpegInstance(BasicIo::AutoPtr io, bool create);
+    EXIV2API Image::UniquePtr newJpegInstance(BasicIo::UniquePtr io, bool create);
     //! Check if the file iIo is a JPEG image.
     EXIV2API bool isJpegType(BasicIo& iIo, bool advance);
     /*!
@@ -429,7 +429,7 @@
              Caller owns the returned object and the auto-pointer ensures that
              it will be deleted.
      */
-    EXIV2API Image::AutoPtr newExvInstance(BasicIo::AutoPtr io, bool create);
+    EXIV2API Image::UniquePtr newExvInstance(BasicIo::UniquePtr io, bool create);
     //! Check if the file iIo is an EXV file
     EXIV2API bool isExvType(BasicIo& iIo, bool advance);
 
diff -Naur exiv2-0.27.2-Source/include/exiv2/matroskavideo.hpp exiv2-0.27.2-Source.new/include/exiv2/matroskavideo.hpp
--- exiv2-0.27.2-Source/include/exiv2/matroskavideo.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/matroskavideo.hpp	2020-02-12 16:32:57.759496030 +0300
@@ -75,7 +75,7 @@
               instance after it is passed to this method. Use the Image::io()
               method to get a temporary reference.
          */
-        MatroskaVideo(BasicIo::AutoPtr io);
+        MatroskaVideo(BasicIo::UniquePtr io);
         //@}
 
         //! @name Manipulators
@@ -145,7 +145,7 @@
           Caller owns the returned object and the auto-pointer ensures that
           it will be deleted.
      */
-    EXIV2LIB_DEPRECATED_EXPORT Image::AutoPtr newMkvInstance(BasicIo::AutoPtr io, bool create);
+    EXIV2LIB_DEPRECATED_EXPORT Image::UniquePtr newMkvInstance(BasicIo::UniquePtr io, bool create);
 
     //! Check if the file iIo is a Matroska Video.
     EXIV2LIB_DEPRECATED_EXPORT bool isMkvType(BasicIo& iIo, bool advance);
diff -Naur exiv2-0.27.2-Source/include/exiv2/metadatum.hpp exiv2-0.27.2-Source.new/include/exiv2/metadatum.hpp
--- exiv2-0.27.2-Source/include/exiv2/metadatum.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/metadatum.hpp	2020-02-12 16:32:57.847496734 +0300
@@ -55,7 +55,7 @@
     class EXIV2API Key {
     public:
         //! Shortcut for a %Key auto pointer.
-        typedef std::auto_ptr<Key> AutoPtr;
+        typedef std::unique_ptr<Key> UniquePtr;
 
         //! @name Creators
         //@{
@@ -87,7 +87,7 @@
                  The caller owns this copy and the auto-pointer ensures that it
                  will be deleted.
          */
-        AutoPtr clone() const;
+        UniquePtr clone() const;
         /*!
           @brief Write the key to an output stream. You do not usually have
                  to use this function; it is used for the implementation of
@@ -262,7 +262,7 @@
           @return An auto-pointer containing a pointer to a copy (clone) of the
                   value, 0 if the value is not set.
          */
-        virtual Value::AutoPtr getValue() const =0;
+        virtual Value::UniquePtr getValue() const =0;
         /*!
           @brief Return a constant reference to the value.
 
diff -Naur exiv2-0.27.2-Source/include/exiv2/mrwimage.hpp exiv2-0.27.2-Source.new/include/exiv2/mrwimage.hpp
--- exiv2-0.27.2-Source/include/exiv2/mrwimage.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/mrwimage.hpp	2020-02-12 16:32:57.917497294 +0300
@@ -69,7 +69,7 @@
           @param create Specifies if an existing image should be read (false)
               or if a new file should be created (true).
          */
-        MrwImage(BasicIo::AutoPtr io, bool create);
+        MrwImage(BasicIo::UniquePtr io, bool create);
         //@}
 
         //! @name Manipulators
@@ -125,7 +125,7 @@
              Caller owns the returned object and the auto-pointer ensures that
              it will be deleted.
      */
-    EXIV2API Image::AutoPtr newMrwInstance(BasicIo::AutoPtr io, bool create);
+    EXIV2API Image::UniquePtr newMrwInstance(BasicIo::UniquePtr io, bool create);
 
     //! Check if the file iIo is a MRW image.
     EXIV2API bool isMrwType(BasicIo& iIo, bool advance);
diff -Naur exiv2-0.27.2-Source/include/exiv2/orfimage.hpp exiv2-0.27.2-Source.new/include/exiv2/orfimage.hpp
--- exiv2-0.27.2-Source/include/exiv2/orfimage.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/orfimage.hpp	2020-02-12 16:32:57.997497935 +0300
@@ -68,7 +68,7 @@
           @param create Specifies if an existing image should be read (false)
               or if a new file should be created (true).
          */
-        OrfImage(BasicIo::AutoPtr io, bool create);
+        OrfImage(BasicIo::UniquePtr io, bool create);
         //@}
 
         //! @name Manipulators
@@ -145,7 +145,7 @@
              Caller owns the returned object and the auto-pointer ensures that
              it will be deleted.
      */
-    EXIV2API Image::AutoPtr newOrfInstance(BasicIo::AutoPtr io, bool create);
+    EXIV2API Image::UniquePtr newOrfInstance(BasicIo::UniquePtr io, bool create);
 
     //! Check if the file iIo is an ORF image.
     EXIV2API bool isOrfType(BasicIo& iIo, bool advance);
diff -Naur exiv2-0.27.2-Source/include/exiv2/pgfimage.hpp exiv2-0.27.2-Source.new/include/exiv2/pgfimage.hpp
--- exiv2-0.27.2-Source/include/exiv2/pgfimage.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/pgfimage.hpp	2020-02-12 16:32:58.073498542 +0300
@@ -73,7 +73,7 @@
           @param create Specifies if an existing image should be read (false)
               or if a new file should be created (true).
          */
-        PgfImage(BasicIo::AutoPtr io, bool create);
+        PgfImage(BasicIo::UniquePtr io, bool create);
         //@}
 
         //! @name Manipulators
@@ -123,7 +123,7 @@
              Caller owns the returned object and the auto-pointer ensures that
              it will be deleted.
      */
-    EXIV2API Image::AutoPtr newPgfInstance(BasicIo::AutoPtr io, bool create);
+    EXIV2API Image::UniquePtr newPgfInstance(BasicIo::UniquePtr io, bool create);
 
     //! Check if the file iIo is a PGF image.
     EXIV2API bool isPgfType(BasicIo& iIo, bool advance);
diff -Naur exiv2-0.27.2-Source/include/exiv2/pngimage.hpp exiv2-0.27.2-Source.new/include/exiv2/pngimage.hpp
--- exiv2-0.27.2-Source/include/exiv2/pngimage.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/pngimage.hpp	2020-02-12 16:32:58.166499286 +0300
@@ -74,7 +74,7 @@
           @param create Specifies if an existing image should be read (false)
               or if a new file should be created (true).
          */
-        PngImage(BasicIo::AutoPtr io, bool create);
+        PngImage(BasicIo::UniquePtr io, bool create);
         //@}
 
         //! @name Manipulators
@@ -127,7 +127,7 @@
              Caller owns the returned object and the auto-pointer ensures that
              it will be deleted.
      */
-    EXIV2API Image::AutoPtr newPngInstance(BasicIo::AutoPtr io, bool create);
+    EXIV2API Image::UniquePtr newPngInstance(BasicIo::UniquePtr io, bool create);
 
     //! Check if the file iIo is a PNG image.
     EXIV2API bool isPngType(BasicIo& iIo, bool advance);
diff -Naur exiv2-0.27.2-Source/include/exiv2/properties.hpp exiv2-0.27.2-Source.new/include/exiv2/properties.hpp
--- exiv2-0.27.2-Source/include/exiv2/properties.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/properties.hpp	2020-02-12 16:43:58.879602908 +0300
@@ -242,7 +242,7 @@
     {
     public:
         //! Shortcut for an %XmpKey auto pointer.
-        typedef std::auto_ptr<XmpKey> AutoPtr;
+        typedef std::unique_ptr<XmpKey> UniquePtr;
 
         //! @name Creators
         //@{
@@ -291,7 +291,7 @@
         //! Properties don't have a tag number. Return 0.
         virtual uint16_t tag() const;
 
-        AutoPtr clone() const;
+        UniquePtr clone() const;
 
         // Todo: Should this be removed? What about tagLabel then?
         //! Return the schema namespace for the prefix of the key
@@ -305,7 +305,7 @@
     private:
         // Pimpl idiom
         struct Impl;
-        std::auto_ptr<Impl> p_;
+        std::unique_ptr<Impl> p_;
 
     };  // class XmpKey
 
diff -Naur exiv2-0.27.2-Source/include/exiv2/psdimage.hpp exiv2-0.27.2-Source.new/include/exiv2/psdimage.hpp
--- exiv2-0.27.2-Source/include/exiv2/psdimage.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/psdimage.hpp	2020-02-12 16:32:58.318500501 +0300
@@ -75,7 +75,7 @@
               instance after it is passed to this method.  Use the Image::io()
               method to get a temporary reference.
          */
-        explicit PsdImage(BasicIo::AutoPtr io);
+        explicit PsdImage(BasicIo::UniquePtr io);
         //@}
 
         //! @name Manipulators
@@ -137,7 +137,7 @@
              Caller owns the returned object and the auto-pointer ensures that
              it will be deleted.
      */
-    EXIV2API Image::AutoPtr newPsdInstance(BasicIo::AutoPtr io, bool create);
+    EXIV2API Image::UniquePtr newPsdInstance(BasicIo::UniquePtr io, bool create);
 
     //! Check if the file iIo is a Photoshop image.
     EXIV2API bool isPsdType(BasicIo& iIo, bool advance);
diff -Naur exiv2-0.27.2-Source/include/exiv2/quicktimevideo.hpp exiv2-0.27.2-Source.new/include/exiv2/quicktimevideo.hpp
--- exiv2-0.27.2-Source/include/exiv2/quicktimevideo.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/quicktimevideo.hpp	2020-02-12 16:32:58.393501101 +0300
@@ -65,7 +65,7 @@
               instance after it is passed to this method. Use the Image::io()
               method to get a temporary reference.
          */
-        QuickTimeVideo(BasicIo::AutoPtr io);
+        QuickTimeVideo(BasicIo::UniquePtr io);
         //@}
 
         //! @name Manipulators
@@ -242,7 +242,7 @@
           Caller owns the returned object and the auto-pointer ensures that
           it will be deleted.
      */
-    EXIV2LIB_DEPRECATED_EXPORT Image::AutoPtr newQTimeInstance(BasicIo::AutoPtr io, bool create);
+    EXIV2LIB_DEPRECATED_EXPORT Image::UniquePtr newQTimeInstance(BasicIo::UniquePtr io, bool create);
 
     //! Check if the file iIo is a Quick Time Video.
     EXIV2LIB_DEPRECATED_EXPORT bool isQTimeType(BasicIo& iIo, bool advance);
diff -Naur exiv2-0.27.2-Source/include/exiv2/rafimage.hpp exiv2-0.27.2-Source.new/include/exiv2/rafimage.hpp
--- exiv2-0.27.2-Source/include/exiv2/rafimage.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/rafimage.hpp	2020-02-12 16:32:58.473501741 +0300
@@ -73,7 +73,7 @@
           @param create Specifies if an existing image should be read (false)
               or if a new file should be created (true).
          */
-        RafImage(BasicIo::AutoPtr io, bool create);
+        RafImage(BasicIo::UniquePtr io, bool create);
         //@}
 
         //! @name Manipulators
@@ -130,7 +130,7 @@
              Caller owns the returned object and the auto-pointer ensures that
              it will be deleted.
      */
-    EXIV2API Image::AutoPtr newRafInstance(BasicIo::AutoPtr io, bool create);
+    EXIV2API Image::UniquePtr newRafInstance(BasicIo::UniquePtr io, bool create);
 
     //! Check if the file iIo is a RAF image.
     EXIV2API bool isRafType(BasicIo& iIo, bool advance);
diff -Naur exiv2-0.27.2-Source/include/exiv2/riffvideo.hpp exiv2-0.27.2-Source.new/include/exiv2/riffvideo.hpp
--- exiv2-0.27.2-Source/include/exiv2/riffvideo.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/riffvideo.hpp	2020-02-12 16:32:58.548502340 +0300
@@ -65,7 +65,7 @@
               instance after it is passed to this method. Use the Image::io()
               method to get a temporary reference.
          */
-        RiffVideo(BasicIo::AutoPtr io);
+        RiffVideo(BasicIo::UniquePtr io);
         //@}
 
         //! @name Manipulators
@@ -210,7 +210,7 @@
           Caller owns the returned object and the auto-pointer ensures that
           it will be deleted.
      */
-    EXIV2LIB_DEPRECATED_EXPORT Image::AutoPtr newRiffInstance(BasicIo::AutoPtr io, bool create);
+    EXIV2LIB_DEPRECATED_EXPORT Image::UniquePtr newRiffInstance(BasicIo::UniquePtr io, bool create);
 
     //! Check if the file iIo is a Riff Video.
     EXIV2LIB_DEPRECATED_EXPORT bool isRiffType(BasicIo& iIo, bool advance);
diff -Naur exiv2-0.27.2-Source/include/exiv2/rw2image.hpp exiv2-0.27.2-Source.new/include/exiv2/rw2image.hpp
--- exiv2-0.27.2-Source/include/exiv2/rw2image.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/rw2image.hpp	2020-02-12 16:32:58.712503652 +0300
@@ -66,7 +66,7 @@
               instance after it is passed to this method.  Use the Image::io()
               method to get a temporary reference.
          */
-        explicit Rw2Image(BasicIo::AutoPtr io);
+        explicit Rw2Image(BasicIo::UniquePtr io);
         //@}
 
         //! @name Manipulators
@@ -145,7 +145,7 @@
              Caller owns the returned object and the auto-pointer ensures that
              it will be deleted.
      */
-    EXIV2API Image::AutoPtr newRw2Instance(BasicIo::AutoPtr io, bool create);
+    EXIV2API Image::UniquePtr newRw2Instance(BasicIo::UniquePtr io, bool create);
 
     //! Check if the file iIo is a RW2 image.
     EXIV2API bool isRw2Type(BasicIo& iIo, bool advance);
diff -Naur exiv2-0.27.2-Source/include/exiv2/tags.hpp exiv2-0.27.2-Source.new/include/exiv2/tags.hpp
--- exiv2-0.27.2-Source/include/exiv2/tags.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/tags.hpp	2020-02-12 16:43:58.324600109 +0300
@@ -148,7 +148,7 @@
     class EXIV2API ExifKey : public Key {
     public:
         //! Shortcut for an %ExifKey auto pointer.
-        typedef std::auto_ptr<ExifKey> AutoPtr;
+        typedef std::unique_ptr<ExifKey> UniquePtr;
 
         //! @name Creators
         //@{
@@ -210,7 +210,7 @@
         //! Return the default type id for this tag.
         TypeId defaultTypeId() const;       // Todo: should be in the base class
 
-        AutoPtr clone() const;
+        UniquePtr clone() const;
         //! Return the index (unique id of this key within the original Exif data, 0 if not set)
         int idx() const;
         //@}
@@ -222,7 +222,7 @@
     private:
         // Pimpl idiom
         struct Impl;
-        std::auto_ptr<Impl> p_;
+        std::unique_ptr<Impl> p_;
 
     }; // class ExifKey
 
diff -Naur exiv2-0.27.2-Source/include/exiv2/tgaimage.hpp exiv2-0.27.2-Source.new/include/exiv2/tgaimage.hpp
--- exiv2-0.27.2-Source/include/exiv2/tgaimage.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/tgaimage.hpp	2020-02-12 16:32:58.888505059 +0300
@@ -75,7 +75,7 @@
               instance after it is passed to this method.  Use the Image::io()
               method to get a temporary reference.
          */
-        explicit TgaImage(BasicIo::AutoPtr io);
+        explicit TgaImage(BasicIo::UniquePtr io);
         //@}
 
         //! @name Manipulators
@@ -120,7 +120,7 @@
              Caller owns the returned object and the auto-pointer ensures that
              it will be deleted.
      */
-    EXIV2API Image::AutoPtr newTgaInstance(BasicIo::AutoPtr io, bool create);
+    EXIV2API Image::UniquePtr newTgaInstance(BasicIo::UniquePtr io, bool create);
 
     //! Check if the file iIo is a Targa v2 image.
     EXIV2API bool isTgaType(BasicIo& iIo, bool advance);
diff -Naur exiv2-0.27.2-Source/include/exiv2/tiffimage.hpp exiv2-0.27.2-Source.new/include/exiv2/tiffimage.hpp
--- exiv2-0.27.2-Source/include/exiv2/tiffimage.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/tiffimage.hpp	2020-02-12 16:32:58.974505747 +0300
@@ -71,7 +71,7 @@
           @param create Specifies if an existing image should be read (false)
               or if a new file should be created (true).
          */
-        TiffImage(BasicIo::AutoPtr io, bool create);
+        TiffImage(BasicIo::UniquePtr io, bool create);
         //@}
 
         //! @name Manipulators
@@ -207,7 +207,7 @@
              Caller owns the returned object and the auto-pointer ensures that
              it will be deleted.
      */
-    EXIV2API Image::AutoPtr newTiffInstance(BasicIo::AutoPtr io, bool create);
+    EXIV2API Image::UniquePtr newTiffInstance(BasicIo::UniquePtr io, bool create);
 
     //! Check if the file iIo is a TIFF image.
     EXIV2API bool isTiffType(BasicIo& iIo, bool advance);
diff -Naur exiv2-0.27.2-Source/include/exiv2/types.hpp exiv2-0.27.2-Source.new/include/exiv2/types.hpp
--- exiv2-0.27.2-Source/include/exiv2/types.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/types.hpp	2020-02-12 16:43:57.541596159 +0300
@@ -185,7 +185,7 @@
 
     /*!
       @brief Auxiliary type to enable copies and assignments, similar to
-             std::auto_ptr_ref. See http://www.josuttis.com/libbook/auto_ptr.html
+             std::unique_ptr_ref. See http://www.josuttis.com/libbook/auto_ptr.html
              for a discussion.
      */
     struct EXIV2API DataBufRef {
@@ -213,7 +213,7 @@
         DataBuf(const byte* pData, long size);
         /*!
           @brief Copy constructor. Transfers the buffer to the newly created
-                 object similar to std::auto_ptr, i.e., the original object is
+                 object similar to std::unique_ptr, i.e., the original object is
                  modified.
          */
         DataBuf(DataBuf& rhs);
@@ -225,7 +225,7 @@
         //@{
         /*!
           @brief Assignment operator. Transfers the buffer and releases the
-                 buffer at the original object similar to std::auto_ptr, i.e.,
+                 buffer at the original object similar to std::unique_ptr, i.e.,
                  the original object is modified.
          */
         DataBuf& operator=(DataBuf& rhs);
@@ -255,7 +255,7 @@
           @name Conversions
 
           Special conversions with auxiliary type to enable copies
-          and assignments, similar to those used for std::auto_ptr.
+          and assignments, similar to those used for std::unique_ptr.
           See http://www.josuttis.com/libbook/auto_ptr.html for a discussion.
          */
         //@{
diff -Naur exiv2-0.27.2-Source/include/exiv2/value.hpp exiv2-0.27.2-Source.new/include/exiv2/value.hpp
--- exiv2-0.27.2-Source/include/exiv2/value.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/value.hpp	2020-02-12 16:32:59.061506442 +0300
@@ -60,7 +60,7 @@
     class EXIV2API Value {
     public:
         //! Shortcut for a %Value auto pointer.
-        typedef std::auto_ptr<Value> AutoPtr;
+        typedef std::unique_ptr<Value> UniquePtr;
 
         //! @name Creators
         //@{
@@ -116,7 +116,7 @@
                  The caller owns this copy and the auto-pointer ensures that
                  it will be deleted.
          */
-        AutoPtr clone() const { return AutoPtr(clone_()); }
+        UniquePtr clone() const { return UniquePtr(clone_()); }
         /*!
           @brief Write value to a data buffer.
 
@@ -233,7 +233,7 @@
           @return Auto-pointer to the newly created Value. The caller owns this
                   copy and the auto-pointer ensures that it will be deleted.
          */
-        static AutoPtr create(TypeId typeId);
+        static UniquePtr create(TypeId typeId);
 
     protected:
         /*!
@@ -262,7 +262,7 @@
     class EXIV2API DataValue : public Value {
     public:
         //! Shortcut for a %DataValue auto pointer.
-        typedef std::auto_ptr<DataValue> AutoPtr;
+        typedef std::unique_ptr<DataValue> UniquePtr;
 
         explicit DataValue(TypeId typeId =undefined);
 
@@ -295,7 +295,7 @@
 
         //! @name Accessors
         //@{
-        AutoPtr clone() const { return AutoPtr(clone_()); }
+        UniquePtr clone() const { return UniquePtr(clone_()); }
         /*!
           @brief Write value to a character data buffer.
 
@@ -344,7 +344,7 @@
     class EXIV2API StringValueBase : public Value {
     public:
         //! Shortcut for a %StringValueBase auto pointer.
-        typedef std::auto_ptr<StringValueBase> AutoPtr;
+        typedef std::unique_ptr<StringValueBase> UniquePtr;
 
         //! @name Creators
         //@{
@@ -381,7 +381,7 @@
 
         //! @name Accessors
         //@{
-        AutoPtr clone() const { return AutoPtr(clone_()); }
+        UniquePtr clone() const { return UniquePtr(clone_()); }
         /*!
           @brief Write value to a character data buffer.
 
@@ -426,7 +426,7 @@
     class EXIV2API StringValue : public StringValueBase {
     public:
         //! Shortcut for a %StringValue auto pointer.
-        typedef std::auto_ptr<StringValue> AutoPtr;
+        typedef std::unique_ptr<StringValue> UniquePtr;
 
         //! @name Creators
         //@{
@@ -440,7 +440,7 @@
 
         //! @name Accessors
         //@{
-        AutoPtr clone() const { return AutoPtr(clone_()); }
+        UniquePtr clone() const { return UniquePtr(clone_()); }
         //@}
 
     private:
@@ -458,7 +458,7 @@
     class EXIV2API AsciiValue : public StringValueBase {
     public:
         //! Shortcut for a %AsciiValue auto pointer.
-        typedef std::auto_ptr<AsciiValue> AutoPtr;
+        typedef std::unique_ptr<AsciiValue> UniquePtr;
 
         //! @name Creators
         //@{
@@ -483,7 +483,7 @@
 
         //! @name Accessors
         //@{
-        AutoPtr clone() const { return AutoPtr(clone_()); }
+        UniquePtr clone() const { return UniquePtr(clone_()); }
         /*!
           @brief Write the ASCII value up to the the first '\\0' character to an
                  output stream.  Any further characters are ignored and not
@@ -546,7 +546,7 @@
         }; // class CharsetInfo
 
         //! Shortcut for a %CommentValue auto pointer.
-        typedef std::auto_ptr<CommentValue> AutoPtr;
+        typedef std::unique_ptr<CommentValue> UniquePtr;
 
         //! @name Creators
         //@{
@@ -581,7 +581,7 @@
 
         //! @name Accessors
         //@{
-        AutoPtr clone() const { return AutoPtr(clone_()); }
+        UniquePtr clone() const { return UniquePtr(clone_()); }
         long copy(byte* buf, ByteOrder byteOrder) const;
         /*!
           @brief Write the comment in a format which can be read by
@@ -633,7 +633,7 @@
     class EXIV2API XmpValue : public Value {
     public:
         //! Shortcut for a %XmpValue auto pointer.
-        typedef std::auto_ptr<XmpValue> AutoPtr;
+        typedef std::unique_ptr<XmpValue> UniquePtr;
 
         //! XMP array types.
         enum XmpArrayType { xaNone, xaAlt, xaBag, xaSeq };
@@ -724,7 +724,7 @@
     class EXIV2API XmpTextValue : public XmpValue {
     public:
         //! Shortcut for a %XmpTextValue auto pointer.
-        typedef std::auto_ptr<XmpTextValue> AutoPtr;
+        typedef std::unique_ptr<XmpTextValue> UniquePtr;
 
         //! @name Creators
         //@{
@@ -757,7 +757,7 @@
 
         //! @name Accessors
         //@{
-        AutoPtr clone() const;
+        UniquePtr clone() const;
         long size() const;
         virtual long count() const;
         /*!
@@ -806,7 +806,7 @@
     class EXIV2API XmpArrayValue : public XmpValue {
     public:
         //! Shortcut for a %XmpArrayValue auto pointer.
-        typedef std::auto_ptr<XmpArrayValue> AutoPtr;
+        typedef std::unique_ptr<XmpArrayValue> UniquePtr;
 
         //! @name Creators
         //@{
@@ -832,7 +832,7 @@
 
         //! @name Accessors
         //@{
-        AutoPtr clone() const;
+        UniquePtr clone() const;
         virtual long count() const;
         /*!
           @brief Return the <EM>n</EM>-th component of the value as a string.
@@ -899,7 +899,7 @@
     class EXIV2API LangAltValue : public XmpValue {
     public:
         //! Shortcut for a %LangAltValue auto pointer.
-        typedef std::auto_ptr<LangAltValue> AutoPtr;
+        typedef std::unique_ptr<LangAltValue> UniquePtr;
 
         //! @name Creators
         //@{
@@ -934,7 +934,7 @@
 
         //! @name Accessors
         //@{
-        AutoPtr clone() const;
+        UniquePtr clone() const;
         virtual long count() const;
         /*!
           @brief Return the text value associated with the default language
@@ -987,7 +987,7 @@
     class EXIV2API DateValue : public Value {
     public:
         //! Shortcut for a %DateValue auto pointer.
-        typedef std::auto_ptr<DateValue> AutoPtr;
+        typedef std::unique_ptr<DateValue> UniquePtr;
 
         //! @name Creators
         //@{
@@ -1040,7 +1040,7 @@
 
         //! @name Accessors
         //@{
-        AutoPtr clone() const { return AutoPtr(clone_()); }
+        UniquePtr clone() const { return UniquePtr(clone_()); }
         /*!
           @brief Write value to a character data buffer.
 
@@ -1088,7 +1088,7 @@
     class EXIV2API TimeValue : public Value {
     public:
         //! Shortcut for a %TimeValue auto pointer.
-        typedef std::auto_ptr<TimeValue> AutoPtr;
+        typedef std::unique_ptr<TimeValue> UniquePtr;
 
         //! @name Creators
         //@{
@@ -1147,7 +1147,7 @@
 
         //! @name Accessors
         //@{
-        AutoPtr clone() const { return AutoPtr(clone_()); }
+        UniquePtr clone() const { return UniquePtr(clone_()); }
         /*!
           @brief Write value to a character data buffer.
 
@@ -1244,7 +1244,7 @@
     class ValueType : public Value {
     public:
         //! Shortcut for a %ValueType\<T\> auto pointer.
-        typedef std::auto_ptr<ValueType<T> > AutoPtr;
+        typedef std::unique_ptr<ValueType<T> > UniquePtr;
 
         //! @name Creators
         //@{
@@ -1284,7 +1284,7 @@
 
         //! @name Accessors
         //@{
-        AutoPtr clone() const { return AutoPtr(clone_()); }
+        UniquePtr clone() const { return UniquePtr(clone_()); }
         virtual long copy(byte* buf, ByteOrder byteOrder) const;
         virtual long count() const;
         virtual long size() const;
diff -Naur exiv2-0.27.2-Source/include/exiv2/webpimage.hpp exiv2-0.27.2-Source.new/include/exiv2/webpimage.hpp
--- exiv2-0.27.2-Source/include/exiv2/webpimage.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/webpimage.hpp	2020-02-12 16:32:59.160507233 +0300
@@ -64,7 +64,7 @@
               instance after it is passed to this method. Use the Image::io()
               method to get a temporary reference.
          */
-        WebPImage(BasicIo::AutoPtr io);
+        WebPImage(BasicIo::UniquePtr io);
         //@}
 
         //! @name Manipulators
@@ -133,7 +133,7 @@
           Caller owns the returned object and the auto-pointer ensures that
           it will be deleted.
      */
-    EXIV2API Image::AutoPtr newWebPInstance(BasicIo::AutoPtr io, bool create);
+    EXIV2API Image::UniquePtr newWebPInstance(BasicIo::UniquePtr io, bool create);
 
     //! Check if the file iIo is a WebP Video.
     EXIV2API bool isWebPType(BasicIo& iIo, bool advance);
diff -Naur exiv2-0.27.2-Source/include/exiv2/xmp_exiv2.hpp exiv2-0.27.2-Source.new/include/exiv2/xmp_exiv2.hpp
--- exiv2-0.27.2-Source/include/exiv2/xmp_exiv2.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/xmp_exiv2.hpp	2020-02-12 16:43:57.288594882 +0300
@@ -146,14 +146,14 @@
         long toLong(long n =0) const;
         float toFloat(long n =0) const;
         Rational toRational(long n =0) const;
-        Value::AutoPtr getValue() const;
+        Value::UniquePtr getValue() const;
         const Value& value() const;
         //@}
 
     private:
         // Pimpl idiom
         struct Impl;
-        std::auto_ptr<Impl> p_;
+        std::unique_ptr<Impl> p_;
 
     }; // class Xmpdatum
 
diff -Naur exiv2-0.27.2-Source/include/exiv2/xmpsidecar.hpp exiv2-0.27.2-Source.new/include/exiv2/xmpsidecar.hpp
--- exiv2-0.27.2-Source/include/exiv2/xmpsidecar.hpp	2019-07-29 09:33:06.000000000 +0300
+++ exiv2-0.27.2-Source.new/include/exiv2/xmpsidecar.hpp	2020-02-12 16:32:59.314508463 +0300
@@ -65,7 +65,7 @@
           @param create Specifies if an existing image should be read (false)
               or if a new image should be created (true).
          */
-        XmpSidecar(BasicIo::AutoPtr io, bool create);
+        XmpSidecar(BasicIo::UniquePtr io, bool create);
         //@}
 
         //! @name Manipulators
@@ -107,7 +107,7 @@
              Caller owns the returned object and the auto-pointer ensures that
              it will be deleted.
      */
-    EXIV2API Image::AutoPtr newXmpInstance(BasicIo::AutoPtr io, bool create);
+    EXIV2API Image::UniquePtr newXmpInstance(BasicIo::UniquePtr io, bool create);
 
     //! Check if the file iIo is an XMP sidecar file.
     EXIV2API bool isXmpType(BasicIo& iIo, bool advance);
diff -Naur exiv2-0.27.2-Source/samples/addmoddel.cpp exiv2-0.27.2-Source.new/samples/addmoddel.cpp
--- exiv2-0.27.2-Source/samples/addmoddel.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/samples/addmoddel.cpp	2020-02-12 16:32:59.390509070 +0300
@@ -34,7 +34,7 @@
     std::cout << "Added a few tags the quick way.\n";
 
     // Create a ASCII string value (note the use of create)
-    Exiv2::Value::AutoPtr v = Exiv2::Value::create(Exiv2::asciiString);
+    Exiv2::Value::UniquePtr v = Exiv2::Value::create(Exiv2::asciiString);
     // Set the value to a string
     v->read("1999:12:31 23:59:59");
     // Add the value together with its key to the Exif data container
@@ -43,7 +43,7 @@
     std::cout << "Added key \"" << key << "\", value \"" << *v << "\"\n";
 
     // Now create a more interesting value (without using the create method)
-    Exiv2::URationalValue::AutoPtr rv(new Exiv2::URationalValue);
+    Exiv2::URationalValue::UniquePtr rv(new Exiv2::URationalValue);
     // Set two rational components from a string
     rv->read("1/2 1/3");
     // Add more elements through the extended interface of rational value
@@ -75,7 +75,7 @@
     // Downcast the Value pointer to its actual type
     Exiv2::URationalValue* prv = dynamic_cast<Exiv2::URationalValue*>(v.release());
     if (prv == 0) throw Exiv2::Error(Exiv2::kerErrorMessage, "Downcast failed");
-    rv = Exiv2::URationalValue::AutoPtr(prv);
+    rv = Exiv2::URationalValue::UniquePtr(prv);
     // Modify the value directly through the interface of URationalValue
     rv->value_[2] = std::make_pair(88,77);
     // Copy the modified value back to the metadatum
@@ -95,7 +95,7 @@
 
     // *************************************************************************
     // Finally, write the remaining Exif data to the image file
-    Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(file);
+    Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(file);
     assert(image.get() != 0);
 
     image->setExifData(exifData);
diff -Naur exiv2-0.27.2-Source/samples/convert-test.cpp exiv2-0.27.2-Source.new/samples/convert-test.cpp
--- exiv2-0.27.2-Source/samples/convert-test.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/samples/convert-test.cpp	2020-02-12 16:32:59.452509566 +0300
@@ -15,7 +15,7 @@
         return 1;
     }
 
-    Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(argv[1]);
+    Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(argv[1]);
     assert(image.get() != 0);
     image->readMetadata();
 
diff -Naur exiv2-0.27.2-Source/samples/easyaccess-test.cpp exiv2-0.27.2-Source.new/samples/easyaccess-test.cpp
--- exiv2-0.27.2-Source/samples/easyaccess-test.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/samples/easyaccess-test.cpp	2020-02-12 16:32:59.579510580 +0300
@@ -48,7 +48,7 @@
         return 1;
     }
 
-    Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(argv[1]);
+    Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(argv[1]);
     assert (image.get() != 0);
     image->readMetadata();
     Exiv2::ExifData& ed = image->exifData();
diff -Naur exiv2-0.27.2-Source/samples/exifcomment.cpp exiv2-0.27.2-Source.new/samples/exifcomment.cpp
--- exiv2-0.27.2-Source/samples/exifcomment.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/samples/exifcomment.cpp	2020-02-12 16:32:59.648511131 +0300
@@ -25,7 +25,7 @@
         return 1;
     }
 
-    Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(argv[1]);
+    Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(argv[1]);
     assert (image.get() != 0);
     image->readMetadata();
     Exiv2::ExifData &exifData = image->exifData();
diff -Naur exiv2-0.27.2-Source/samples/exifdata.cpp exiv2-0.27.2-Source.new/samples/exifdata.cpp
--- exiv2-0.27.2-Source/samples/exifdata.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/samples/exifdata.cpp	2020-02-12 16:32:59.782512202 +0300
@@ -174,7 +174,7 @@
 	}
 
 	if ( !result ) try {
-		Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(file);
+		Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(file);
 		assert(image.get() != 0);
 		image->readMetadata();
 		Exiv2::ExifData &exifData = image->exifData();
diff -Naur exiv2-0.27.2-Source/samples/exifdata-test.cpp exiv2-0.27.2-Source.new/samples/exifdata-test.cpp
--- exiv2-0.27.2-Source/samples/exifdata-test.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/samples/exifdata-test.cpp	2020-02-12 16:32:59.724511738 +0300
@@ -30,7 +30,7 @@
     }
     std::string file(argv[1]);
 
-    Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(file);
+    Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(file);
     assert (image.get() != 0);
     image->readMetadata();
 
@@ -103,7 +103,7 @@
 
 void write(const std::string& file, Exiv2::ExifData& ed)
 {
-    Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(file);
+    Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(file);
     assert (image.get() != 0);
     image->setExifData(ed);
     image->writeMetadata();
@@ -111,7 +111,7 @@
 
 void print(const std::string& file)
 {
-    Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(file);
+    Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(file);
     assert (image.get() != 0);
     image->readMetadata();
 
diff -Naur exiv2-0.27.2-Source/samples/exifprint.cpp exiv2-0.27.2-Source.new/samples/exifprint.cpp
--- exiv2-0.27.2-Source/samples/exifprint.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/samples/exifprint.cpp	2020-02-12 16:32:59.848512729 +0300
@@ -67,7 +67,7 @@
         return 0;
     }
 
-    Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(file);
+    Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(file);
     assert(image.get() != 0);
     image->readMetadata();
 
diff -Naur exiv2-0.27.2-Source/samples/exifvalue.cpp exiv2-0.27.2-Source.new/samples/exifvalue.cpp
--- exiv2-0.27.2-Source/samples/exifvalue.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/samples/exifvalue.cpp	2020-02-12 16:32:59.919513296 +0300
@@ -19,7 +19,7 @@
     const char* file = argv[1];
     const char* key  = argv[2];
 
-    Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(file);
+    Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(file);
     assert(image.get() != 0);
     image->readMetadata();
     Exiv2::ExifData &exifData = image->exifData();
diff -Naur exiv2-0.27.2-Source/samples/exiv2json.cpp exiv2-0.27.2-Source.new/samples/exiv2json.cpp
--- exiv2-0.27.2-Source/samples/exiv2json.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/samples/exiv2json.cpp	2020-02-12 16:32:59.987513839 +0300
@@ -279,7 +279,7 @@
         while      (opt[0] == '-') opt++ ; // skip past leading -'s
         char        option = opt[0];
 
-        Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(path);
+        Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(path);
         assert(image.get() != 0);
         image->readMetadata();
 
diff -Naur exiv2-0.27.2-Source/samples/geotag.cpp exiv2-0.27.2-Source.new/samples/geotag.cpp
--- exiv2-0.27.2-Source/samples/geotag.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/samples/geotag.cpp	2020-02-12 16:33:00.051514350 +0300
@@ -597,7 +597,7 @@
     bool bResult = false ;
 
     try {
-        Image::AutoPtr image = ImageFactory::open(path);
+        Image::UniquePtr image = ImageFactory::open(path);
         if ( image.get() ) {
             image->readMetadata();
             ExifData &exifData = image->exifData();
@@ -623,7 +623,7 @@
 
     do {
         try {
-            Image::AutoPtr image = ImageFactory::open(path);
+            Image::UniquePtr image = ImageFactory::open(path);
             if ( image.get() ) {
                 image->readMetadata();
                 ExifData &exifData = image->exifData();
@@ -898,7 +898,7 @@
             try {
                 time_t t       = readImageTime(path,&stamp) ;
                 Position* pPos = searchTimeDict(gTimeDict,t,Position::deltaMax_);
-                Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(path);
+                Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(path);
                 if ( image.get() ) {
                     image->readMetadata();
                     Exiv2::ExifData& exifData = image->exifData();
diff -Naur exiv2-0.27.2-Source/samples/iptceasy.cpp exiv2-0.27.2-Source.new/samples/iptceasy.cpp
--- exiv2-0.27.2-Source/samples/iptceasy.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/samples/iptceasy.cpp	2020-02-12 16:33:00.089514654 +0300
@@ -34,7 +34,7 @@
     std::cout << "Time sent: " << iptcData["Iptc.Envelope.TimeSent"] << "\n";
 
     // Open image file
-    Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(file);
+    Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(file);
     assert (image.get() != 0);
 
     // Set IPTC data and write it to the file
diff -Naur exiv2-0.27.2-Source/samples/iptcprint.cpp exiv2-0.27.2-Source.new/samples/iptcprint.cpp
--- exiv2-0.27.2-Source/samples/iptcprint.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/samples/iptcprint.cpp	2020-02-12 16:33:00.175515340 +0300
@@ -16,7 +16,7 @@
         return 1;
     }
 
-    Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(argv[1]);
+    Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(argv[1]);
     assert (image.get() != 0);
     image->readMetadata();
 
diff -Naur exiv2-0.27.2-Source/samples/iptctest.cpp exiv2-0.27.2-Source.new/samples/iptctest.cpp
--- exiv2-0.27.2-Source/samples/iptctest.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/samples/iptctest.cpp	2020-02-12 16:33:00.245515898 +0300
@@ -34,7 +34,7 @@
             return 1;
         }
 
-        Image::AutoPtr image = ImageFactory::open(argv[1]);
+        Image::UniquePtr image = ImageFactory::open(argv[1]);
         assert (image.get() != 0);
         image->readMetadata();
 
@@ -106,7 +106,7 @@
         data = data.substr(1, data.size()-2);
     }
     TypeId type = IptcDataSets::dataSetType(iptcKey.tag(), iptcKey.record());
-    Value::AutoPtr value = Value::create(type);
+    Value::UniquePtr value = Value::create(type);
     value->read(data);
 
     int rc = iptcData.add(iptcKey, value.get());
@@ -157,7 +157,7 @@
         data = data.substr(1, data.size()-2);
     }
     TypeId type = IptcDataSets::dataSetType(iptcKey.tag(), iptcKey.record());
-    Value::AutoPtr value = Value::create(type);
+    Value::UniquePtr value = Value::create(type);
     value->read(data);
 
     IptcData::iterator iter = iptcData.findKey(iptcKey);
diff -Naur exiv2-0.27.2-Source/samples/largeiptc-test.cpp exiv2-0.27.2-Source.new/samples/largeiptc-test.cpp
--- exiv2-0.27.2-Source/samples/largeiptc-test.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/samples/largeiptc-test.cpp	2020-02-12 16:33:00.306516385 +0300
@@ -26,7 +26,7 @@
     if (io.error() || !io.eof()) throw Exiv2::Error(Exiv2::kerFailedToReadImageData);
 
     // Read metadata from file
-    Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(file);
+    Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(file);
     assert(image.get() != 0);
     image->readMetadata();
 
diff -Naur exiv2-0.27.2-Source/samples/metacopy.cpp exiv2-0.27.2-Source.new/samples/metacopy.cpp
--- exiv2-0.27.2-Source/samples/metacopy.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/samples/metacopy.cpp	2020-02-12 17:23:02.535893655 +0300
@@ -52,15 +52,15 @@
     }
 
     // Use MemIo to increase test coverage.
-    Exiv2::BasicIo::AutoPtr fileIo(new Exiv2::FileIo(params.read_));
-    Exiv2::BasicIo::AutoPtr memIo(new Exiv2::MemIo);
+    Exiv2::BasicIo::UniquePtr fileIo(new Exiv2::FileIo(params.read_));
+    Exiv2::BasicIo::UniquePtr memIo(new Exiv2::MemIo);
     memIo->transfer(*fileIo);
 
-    Exiv2::Image::AutoPtr readImg = Exiv2::ImageFactory::open(memIo);
+    Exiv2::Image::UniquePtr readImg = Exiv2::ImageFactory::open(std::move(memIo));
     assert(readImg.get() != 0);
     readImg->readMetadata();
 
-    Exiv2::Image::AutoPtr writeImg = Exiv2::ImageFactory::open(params.write_);
+    Exiv2::Image::UniquePtr writeImg = Exiv2::ImageFactory::open(params.write_);
     assert(writeImg.get() != 0);
     if (params.preserve_) writeImg->readMetadata();
     if (params.iptc_) {
diff -Naur exiv2-0.27.2-Source/samples/mrwthumb.cpp exiv2-0.27.2-Source.new/samples/mrwthumb.cpp
--- exiv2-0.27.2-Source/samples/mrwthumb.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/samples/mrwthumb.cpp	2020-02-12 16:33:00.413517239 +0300
@@ -17,7 +17,7 @@
             return 1;
         }
 
-        Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(argv[1]);
+        Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(argv[1]);
         assert(image.get() != 0);
         image->readMetadata();
 
diff -Naur exiv2-0.27.2-Source/samples/mt-test.cpp exiv2-0.27.2-Source.new/samples/mt-test.cpp
--- exiv2-0.27.2-Source/samples/mt-test.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/samples/mt-test.cpp	2020-02-12 16:33:00.479517766 +0300
@@ -35,7 +35,7 @@
 
 	// count the exif metadata in the file
 	try {
-		Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(argv[n]);
+		Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(argv[n]);
 		assert(image.get() != 0);
 		image->readMetadata();
 
diff -Naur exiv2-0.27.2-Source/samples/prevtest.cpp exiv2-0.27.2-Source.new/samples/prevtest.cpp
--- exiv2-0.27.2-Source/samples/prevtest.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/samples/prevtest.cpp	2020-02-12 16:33:00.548518317 +0300
@@ -16,7 +16,7 @@
     }
     std::string filename(argv[1]);
 
-    Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(filename);
+    Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(filename);
     assert(image.get() != 0);
     image->readMetadata();
 
diff -Naur exiv2-0.27.2-Source/samples/remotetest.cpp exiv2-0.27.2-Source.new/samples/remotetest.cpp
--- exiv2-0.27.2-Source/samples/remotetest.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/samples/remotetest.cpp	2020-02-12 16:33:00.580518572 +0300
@@ -35,19 +35,19 @@
     exifData["Exif.Image.Make"]         = "Canon";                 // AsciiValue
     exifData["Exif.Canon.OwnerName"]    = "Tuan";                  // UShortValue
     exifData["Exif.CanonCs.LensType"]   = uint16_t(65535);         // LongValue
-    Exiv2::Value::AutoPtr v = Exiv2::Value::create(Exiv2::asciiString);
+    Exiv2::Value::UniquePtr v = Exiv2::Value::create(Exiv2::asciiString);
     v->read("2013:06:09 14:30:30");
     Exiv2::ExifKey key("Exif.Image.DateTime");
     exifData.add(key, v.get());
 
-    Exiv2::Image::AutoPtr writeTest = Exiv2::ImageFactory::open(file, useCurlFromExiv2TestApps);
+    Exiv2::Image::UniquePtr writeTest = Exiv2::ImageFactory::open(file, useCurlFromExiv2TestApps);
     assert(writeTest.get() != 0);
     writeTest->setExifData(exifData);
     writeTest->writeMetadata();
 
     // read the result to make sure everything fine
     std::cout << "Print out the new metadata ...\n";
-    Exiv2::Image::AutoPtr readTest = Exiv2::ImageFactory::open(file, useCurlFromExiv2TestApps);
+    Exiv2::Image::UniquePtr readTest = Exiv2::ImageFactory::open(file, useCurlFromExiv2TestApps);
     assert(readTest.get() != 0);
     readTest->readMetadata();
     Exiv2::ExifData &exifReadData = readTest->exifData();
diff -Naur exiv2-0.27.2-Source/samples/tiff-test.cpp exiv2-0.27.2-Source.new/samples/tiff-test.cpp
--- exiv2-0.27.2-Source/samples/tiff-test.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/samples/tiff-test.cpp	2020-02-12 16:33:00.613518835 +0300
@@ -66,7 +66,7 @@
 
 void mini9(const char* path)
 {
-    TiffImage tiffImage(BasicIo::AutoPtr(new FileIo(path)), false);
+    TiffImage tiffImage(BasicIo::UniquePtr(new FileIo(path)), false);
     tiffImage.readMetadata();
 
     std::cout << "MIME type:  " << tiffImage.mimeType() << "\n";
diff -Naur exiv2-0.27.2-Source/samples/toexv.cpp exiv2-0.27.2-Source.new/samples/toexv.cpp
--- exiv2-0.27.2-Source/samples/toexv.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/samples/toexv.cpp	2020-02-12 16:33:00.647519107 +0300
@@ -32,7 +32,7 @@
 #include "utils.hpp"
 #include "toexv.hpp"
 
-static size_t exifMetadataCount(Exiv2::Image::AutoPtr& image)
+static size_t exifMetadataCount(Exiv2::Image::UniquePtr& image)
 {
 	size_t result = 0 ;
 	Exiv2::ExifData&                  exif = image->exifData();
@@ -51,7 +51,7 @@
 		if (params.getopt(argc, argv)) return params.usage();
 		if (params.help_             ) return params.help();
 
-		Exiv2::Image::AutoPtr readImage = Exiv2::ImageFactory::open(params.read_);
+		Exiv2::Image::UniquePtr readImage = Exiv2::ImageFactory::open(params.read_);
 		assert(readImage.get() != 0);
 		readImage->readMetadata();
 
@@ -59,8 +59,8 @@
 			std::cout << "exifMetadataCount = " << exifMetadataCount(readImage) << std::endl;
 
 			// create an in-memory file and write the metadata
-			Exiv2::BasicIo::AutoPtr memIo   (new Exiv2::MemIo());
-			Exiv2::Image::AutoPtr   memImage(new Exiv2::ExvImage(memIo,true));
+			Exiv2::BasicIo::UniquePtr memIo   (new Exiv2::MemIo());
+			Exiv2::Image::UniquePtr   memImage(new Exiv2::ExvImage(memIo,true));
 			memImage->setMetadata  (*readImage);
 			memImage->writeMetadata();
 
@@ -73,8 +73,8 @@
 			std::cout << "size = " << size << std::endl;
 
 			// create an in-memory file with buff and read the metadata into buffImage
-			Exiv2::BasicIo::AutoPtr buffIo   (new Exiv2::MemIo(buff,size));
-			Exiv2::Image::AutoPtr   buffImage(new Exiv2::ExvImage(buffIo,false));
+			Exiv2::BasicIo::UniquePtr buffIo   (new Exiv2::MemIo(buff,size));
+			Exiv2::Image::UniquePtr   buffImage(new Exiv2::ExvImage(buffIo,false));
 			assert(buffImage.get() != 0);
 			buffImage->readMetadata();
 
@@ -82,12 +82,12 @@
 
 		} else if ( params.write_ != "-" ) {
 			// create a file and write the metadata
-			Exiv2::Image::AutoPtr writeImage = Exiv2::ImageFactory::create(Exiv2::ImageType::exv,params.write_);
+			Exiv2::Image::UniquePtr writeImage = Exiv2::ImageFactory::create(Exiv2::ImageType::exv,params.write_);
 			params.copyMetadata(readImage,writeImage);
 		} else {
 			// create an in-memory file
-			Exiv2::BasicIo::AutoPtr memIo   (new Exiv2::MemIo());
-			Exiv2::Image::AutoPtr   memImage(new Exiv2::ExvImage(memIo,true));
+			Exiv2::BasicIo::UniquePtr memIo   (new Exiv2::MemIo());
+			Exiv2::Image::UniquePtr   memImage(new Exiv2::ExvImage(memIo,true));
 			params.copyMetadata(readImage,memImage);
 
 			// read a few bytes from the in-memory file
@@ -129,7 +129,7 @@
 , usage_(false)
 {}
 
-void Params::copyMetadata(Exiv2::Image::AutoPtr& readImage,Exiv2::Image::AutoPtr& writeImage)
+void Params::copyMetadata(Exiv2::Image::UniquePtr& readImage,Exiv2::Image::UniquePtr& writeImage)
 {
 	if (all_    ) writeImage->setMetadata  (*readImage);
 	if (iptc_   ) writeImage->setIptcData  ( readImage->iptcData());
diff -Naur exiv2-0.27.2-Source/samples/toexv.hpp exiv2-0.27.2-Source.new/samples/toexv.hpp
--- exiv2-0.27.2-Source/samples/toexv.hpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/samples/toexv.hpp	2020-02-12 16:33:00.691519458 +0300
@@ -68,7 +68,7 @@
     int help(std::ostream& os =std::cout) const;
 
     //! copy metadata from one image to another.
-    void copyMetadata(Exiv2::Image::AutoPtr& readImage,Exiv2::Image::AutoPtr& writeImage);
+    void copyMetadata(Exiv2::Image::UniquePtr& readImage,Exiv2::Image::UniquePtr& writeImage);
 
 }; // class Params
 
diff -Naur exiv2-0.27.2-Source/samples/write2-test.cpp exiv2-0.27.2-Source.new/samples/write2-test.cpp
--- exiv2-0.27.2-Source/samples/write2-test.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/samples/write2-test.cpp	2020-02-12 16:33:00.839520639 +0300
@@ -34,19 +34,19 @@
     Exiv2::ExifData ed1;
     ed1["Exif.Image.Model"] = "Test 1";
 
-    Exiv2::Value::AutoPtr v1 = Exiv2::Value::create(Exiv2::unsignedShort);
+    Exiv2::Value::UniquePtr v1 = Exiv2::Value::create(Exiv2::unsignedShort);
     v1->read("160 161 162 163");
     ed1.add(Exiv2::ExifKey("Exif.Image.SamplesPerPixel"), v1.get());
 
-    Exiv2::Value::AutoPtr v2 = Exiv2::Value::create(Exiv2::signedLong);
+    Exiv2::Value::UniquePtr v2 = Exiv2::Value::create(Exiv2::signedLong);
     v2->read("-2 -1 0 1");
     ed1.add(Exiv2::ExifKey("Exif.Image.XResolution"), v2.get());
 
-    Exiv2::Value::AutoPtr v3 = Exiv2::Value::create(Exiv2::signedRational);
+    Exiv2::Value::UniquePtr v3 = Exiv2::Value::create(Exiv2::signedRational);
     v3->read("-2/3 -1/3 0/3 1/3");
     ed1.add(Exiv2::ExifKey("Exif.Image.YResolution"), v3.get());
 
-    Exiv2::Value::AutoPtr v4 = Exiv2::Value::create(Exiv2::undefined);
+    Exiv2::Value::UniquePtr v4 = Exiv2::Value::create(Exiv2::undefined);
     v4->read("255 254 253 252");
     ed1.add(Exiv2::ExifKey("Exif.Image.WhitePoint"), v4.get());
 
@@ -73,7 +73,7 @@
     print(file);
 
     std::cout <<"\n----- Non-intrusive writing of special Canon MakerNote tags\n";
-    Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(file);
+    Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(file);
     assert(image.get() != 0);
     image->readMetadata();
 
@@ -189,7 +189,7 @@
     std::cout <<"\n----- One IFD0 and one IFD1 tag\n";
     Exiv2::ExifData ed7;
     ed7["Exif.Thumbnail.Artist"] = "Test 7";
-    Exiv2::Value::AutoPtr v5 = Exiv2::Value::create(Exiv2::unsignedShort);
+    Exiv2::Value::UniquePtr v5 = Exiv2::Value::create(Exiv2::unsignedShort);
     v5->read("160 161 162 163");
     ed7.add(Exiv2::ExifKey("Exif.Image.SamplesPerPixel"), v5.get());
     write(file, ed7);
@@ -205,7 +205,7 @@
 
 void write(const std::string& file, Exiv2::ExifData& ed)
 {
-    Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(file);
+    Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(file);
     assert(image.get() != 0);
 
     image->setExifData(ed);
@@ -214,7 +214,7 @@
 
 void print(const std::string& file)
 {
-    Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(file);
+    Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(file);
     assert(image.get() != 0);
     image->readMetadata();
 
diff -Naur exiv2-0.27.2-Source/samples/write-test.cpp exiv2-0.27.2-Source.new/samples/write-test.cpp
--- exiv2-0.27.2-Source/samples/write-test.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/samples/write-test.cpp	2020-02-12 16:33:00.747519905 +0300
@@ -161,7 +161,7 @@
     ExifKey ek(key);
 
     //Open first image
-    Image::AutoPtr image1 = ImageFactory::open(file1);
+    Image::UniquePtr image1 = ImageFactory::open(file1);
     assert(image1.get() != 0);
 
     // Load existing metadata
@@ -177,7 +177,7 @@
     pos->setValue(value);
 
     // Open second image
-    Image::AutoPtr image2 = ImageFactory::open(file2);
+    Image::UniquePtr image2 = ImageFactory::open(file2);
     assert(image2.get() != 0);
 
     image2->setExifData(image1->exifData());
diff -Naur exiv2-0.27.2-Source/samples/xmpdump.cpp exiv2-0.27.2-Source.new/samples/xmpdump.cpp
--- exiv2-0.27.2-Source/samples/xmpdump.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/samples/xmpdump.cpp	2020-02-12 16:33:00.921521293 +0300
@@ -17,7 +17,7 @@
             return 1;
         }
 
-        Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(argv[1]);
+        Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(argv[1]);
         assert(image.get() != 0);
         image->readMetadata();
 
diff -Naur exiv2-0.27.2-Source/samples/xmpprint.cpp exiv2-0.27.2-Source.new/samples/xmpprint.cpp
--- exiv2-0.27.2-Source/samples/xmpprint.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/samples/xmpprint.cpp	2020-02-12 16:33:01.005521963 +0300
@@ -24,7 +24,7 @@
         return 1;
       }
 
-    Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(argv[1]);
+    Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(argv[1]);
     assert (image.get() != 0);
     image->readMetadata();
 
diff -Naur exiv2-0.27.2-Source/samples/xmpsample.cpp exiv2-0.27.2-Source.new/samples/xmpsample.cpp
--- exiv2-0.27.2-Source/samples/xmpsample.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/samples/xmpsample.cpp	2020-02-12 16:33:01.098522705 +0300
@@ -112,7 +112,7 @@
     // properties and language alternatives.
 
     // Add a simple XMP property in a known namespace
-    Exiv2::Value::AutoPtr v = Exiv2::Value::create(Exiv2::xmpText);
+    Exiv2::Value::UniquePtr v = Exiv2::Value::create(Exiv2::xmpText);
     v->read("image/jpeg");
     xmpData.add(Exiv2::XmpKey("Xmp.dc.format"), v.get());
 
diff -Naur exiv2-0.27.2-Source/src/actions.cpp exiv2-0.27.2-Source.new/src/actions.cpp
--- exiv2-0.27.2-Source/src/actions.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/actions.cpp	2020-02-12 17:22:00.289749136 +0300
@@ -166,9 +166,9 @@
     {
     }
 
-    Task::AutoPtr Task::clone() const
+    Task::UniquePtr Task::clone() const
     {
-        return AutoPtr(clone_());
+        return UniquePtr(clone_());
     }
 
     TaskFactory* TaskFactory::instance_ = 0;
@@ -193,7 +193,7 @@
         }
     } //TaskFactory::cleanup
 
-    void TaskFactory::registerTask(TaskType type, Task::AutoPtr task)
+    void TaskFactory::registerTask(TaskType type, Task::UniquePtr task)
     {
         Registry::iterator i = registry_.find(type);
         if (i != registry_.end()) {
@@ -205,25 +205,25 @@
     TaskFactory::TaskFactory()
     {
         // Register a prototype of each known task
-        registerTask(adjust,  Task::AutoPtr(new Adjust));
-        registerTask(print,   Task::AutoPtr(new Print));
-        registerTask(rename,  Task::AutoPtr(new Rename));
-        registerTask(erase,   Task::AutoPtr(new Erase));
-        registerTask(extract, Task::AutoPtr(new Extract));
-        registerTask(insert,  Task::AutoPtr(new Insert));
-        registerTask(modify,  Task::AutoPtr(new Modify));
-        registerTask(fixiso,  Task::AutoPtr(new FixIso));
-        registerTask(fixcom,  Task::AutoPtr(new FixCom));
+        registerTask(adjust,  Task::UniquePtr(new Adjust));
+        registerTask(print,   Task::UniquePtr(new Print));
+        registerTask(rename,  Task::UniquePtr(new Rename));
+        registerTask(erase,   Task::UniquePtr(new Erase));
+        registerTask(extract, Task::UniquePtr(new Extract));
+        registerTask(insert,  Task::UniquePtr(new Insert));
+        registerTask(modify,  Task::UniquePtr(new Modify));
+        registerTask(fixiso,  Task::UniquePtr(new FixIso));
+        registerTask(fixcom,  Task::UniquePtr(new FixCom));
     } // TaskFactory c'tor
 
-    Task::AutoPtr TaskFactory::create(TaskType type)
+    Task::UniquePtr TaskFactory::create(TaskType type)
     {
         Registry::const_iterator i = registry_.find(type);
         if (i != registry_.end() && i->second != 0) {
             Task* t = i->second;
             return t->clone();
         }
-        return Task::AutoPtr(0);
+        return Task::UniquePtr(nullptr);
     } // TaskFactory::create
 
     Print::~Print()
@@ -281,7 +281,7 @@
                       << _("Failed to open the file\n");
             return -1;
         }
-        Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(path_);
+        Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(path_);
         assert(image.get() != 0);
         image->readMetadata();
         Exiv2::ExifData& exifData = image->exifData();
@@ -513,7 +513,7 @@
                       << ": " << _("Failed to open the file\n");
             return -1;
         }
-        Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(path_);
+        Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(path_);
         assert(image.get() != 0);
         image->readMetadata();
         // Set defaults for metadata types and data columns
@@ -765,7 +765,7 @@
                       << ": " << _("Failed to open the file\n");
             return -1;
         }
-        Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(path_);
+        Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(path_);
         assert(image.get() != 0);
         image->readMetadata();
         if (Params::instance().verbose_) {
@@ -782,7 +782,7 @@
                       << ": " << _("Failed to open the file\n");
             return -1;
         }
-        Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(path_);
+        Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(path_);
         assert(image.get() != 0);
         image->readMetadata();
         bool const manyFiles = Params::instance().files_.size() > 1;
@@ -805,9 +805,9 @@
         return 0;
     } // Print::printPreviewList
 
-    Print::AutoPtr Print::clone() const
+    Print::UniquePtr Print::clone() const
     {
-        return AutoPtr(clone_());
+        return UniquePtr(clone_());
     }
 
     Print* Print::clone_() const
@@ -830,7 +830,7 @@
         Timestamp ts;
         if (Params::instance().preserve_) ts.read(path);
 
-        Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(path);
+        Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(path);
         assert(image.get() != 0);
         image->readMetadata();
         Exiv2::ExifData& exifData = image->exifData();
@@ -893,9 +893,9 @@
         return 1;
     }} // Rename::run
 
-    Rename::AutoPtr Rename::clone() const
+    Rename::UniquePtr Rename::clone() const
     {
-        return AutoPtr(clone_());
+        return UniquePtr(clone_());
     }
 
     Rename* Rename::clone_() const
@@ -919,7 +919,7 @@
         Timestamp ts;
         if (Params::instance().preserve_) ts.read(path);
 
-        Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(path_);
+        Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(path_);
         assert(image.get() != 0);
         image->readMetadata();
         // Thumbnail must be before Exif
@@ -1019,9 +1019,9 @@
         return 0;
     }
 
-    Erase::AutoPtr Erase::clone() const
+    Erase::UniquePtr Erase::clone() const
     {
-        return AutoPtr(clone_());
+        return UniquePtr(clone_());
     }
 
     Erase* Erase::clone_() const
@@ -1084,7 +1084,7 @@
                       << ": " << _("Failed to open the file\n");
             return -1;
         }
-        Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(path_);
+        Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(path_);
         assert(image.get() != 0);
         image->readMetadata();
         Exiv2::ExifData& exifData = image->exifData();
@@ -1126,7 +1126,7 @@
                       << ": " << _("Failed to open the file\n");
             return -1;
         }
-        Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(path_);
+        Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(path_);
         assert(image.get() != 0);
         image->readMetadata();
 
@@ -1164,7 +1164,7 @@
         bool bStdout = target == "-" ;
 
         if ( rc == 0 ) {
-            Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(path_);
+            Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(path_);
             assert(image.get() != 0);
             image->readMetadata();
             if ( !image->iccProfileDefined() ) {
@@ -1211,9 +1211,9 @@
         }
     } // Extract::writePreviewFile
 
-    Extract::AutoPtr Extract::clone() const
+    Extract::UniquePtr Extract::clone() const
     {
-        return AutoPtr(clone_());
+        return UniquePtr(clone_());
     }
 
     Extract* Extract::clone_() const
@@ -1312,7 +1312,7 @@
         for ( long i = 0 ; i < xmpBlob.size_ ; i++ ) {
             xmpPacket += (char) xmpBlob.pData_[i];
         }
-        Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(path);
+        Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(path);
         assert(image.get() != 0);
         image->readMetadata();
         image->clearXmpData();
@@ -1356,7 +1356,7 @@
 
         // read in the metadata
         if ( rc == 0 ) {
-            Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(path);
+            Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(path);
             assert(image.get() != 0);
             image->readMetadata();
             // clear existing profile, assign the blob and rewrite image
@@ -1383,7 +1383,7 @@
                       << ": " << _("Failed to open the file\n");
             return -1;
         }
-        Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(path);
+        Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(path);
         assert(image.get() != 0);
         image->readMetadata();
         Exiv2::ExifThumb exifThumb(image->exifData());
@@ -1393,9 +1393,9 @@
         return 0;
     } // Insert::insertThumbnail
 
-    Insert::AutoPtr Insert::clone() const
+    Insert::UniquePtr Insert::clone() const
     {
-        return AutoPtr(clone_());
+        return UniquePtr(clone_());
     }
 
     Insert* Insert::clone_() const
@@ -1418,7 +1418,7 @@
         Timestamp ts;
         if (Params::instance().preserve_) ts.read(path);
 
-        Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(path);
+        Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(path);
         assert(image.get() != 0);
         image->readMetadata();
 
@@ -1492,7 +1492,7 @@
         Exiv2::ExifData& exifData = pImage->exifData();
         Exiv2::IptcData& iptcData = pImage->iptcData();
         Exiv2::XmpData&  xmpData  = pImage->xmpData();
-        Exiv2::Value::AutoPtr value = Exiv2::Value::create(modifyCmd.typeId_);
+        Exiv2::Value::UniquePtr value = Exiv2::Value::create(modifyCmd.typeId_);
         int rc = value->read(modifyCmd.value_);
         if (0 == rc) {
             if (modifyCmd.metadataId_ == exif) {
@@ -1553,7 +1553,7 @@
         // If a type was explicitly requested, use it; else
         // use the current type of the metadatum, if any;
         // or the default type
-        Exiv2::Value::AutoPtr value;
+        Exiv2::Value::UniquePtr value;
         if (metadatum) {
             value = metadatum->getValue();
         }
@@ -1630,9 +1630,9 @@
         Exiv2::XmpProperties::registerNs(modifyCmd.value_, modifyCmd.key_);
     }
 
-    Modify::AutoPtr Modify::clone() const
+    Modify::UniquePtr Modify::clone() const
     {
-        return AutoPtr(clone_());
+        return UniquePtr(clone_());
     }
 
     Modify* Modify::clone_() const
@@ -1659,7 +1659,7 @@
         Timestamp ts;
         if (Params::instance().preserve_) ts.read(path);
 
-        Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(path);
+        Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(path);
         assert(image.get() != 0);
         image->readMetadata();
         Exiv2::ExifData& exifData = image->exifData();
@@ -1686,9 +1686,9 @@
         return 1;
     } // Adjust::run
 
-    Adjust::AutoPtr Adjust::clone() const
+    Adjust::UniquePtr Adjust::clone() const
     {
-        return AutoPtr(clone_());
+        return UniquePtr(clone_());
     }
 
     Adjust* Adjust::clone_() const
@@ -1795,7 +1795,7 @@
         Timestamp ts;
         if (Params::instance().preserve_) ts.read(path);
 
-        Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(path);
+        Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(path);
         assert(image.get() != 0);
         image->readMetadata();
         Exiv2::ExifData& exifData = image->exifData();
@@ -1833,9 +1833,9 @@
     }
     } // FixIso::run
 
-    FixIso::AutoPtr FixIso::clone() const
+    FixIso::UniquePtr FixIso::clone() const
     {
-        return AutoPtr(clone_());
+        return UniquePtr(clone_());
     }
 
     FixIso* FixIso::clone_() const
@@ -1858,7 +1858,7 @@
         Timestamp ts;
         if (Params::instance().preserve_) ts.read(path);
 
-        Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(path);
+        Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(path);
         assert(image.get() != 0);
         image->readMetadata();
         Exiv2::ExifData& exifData = image->exifData();
@@ -1874,7 +1874,7 @@
             }
             return 0;
         }
-        Exiv2::Value::AutoPtr v = pos->getValue();
+        Exiv2::Value::UniquePtr v = pos->getValue();
         const Exiv2::CommentValue* pcv = dynamic_cast<const Exiv2::CommentValue*>(v.get());
         if (!pcv) {
             if (Params::instance().verbose_) {
@@ -1909,9 +1909,9 @@
     }
     } // FixCom::run
 
-    FixCom::AutoPtr FixCom::clone() const
+    FixCom::UniquePtr FixCom::clone() const
     {
-        return AutoPtr(clone_());
+        return UniquePtr(clone_());
     }
 
     FixCom* FixCom::clone_() const
@@ -2087,9 +2087,9 @@
 
         Exiv2::DataBuf stdIn;
         if ( bStdin )  Params::instance().getStdin(stdIn);
-        Exiv2::BasicIo::AutoPtr ioStdin = Exiv2::BasicIo::AutoPtr(new Exiv2::MemIo(stdIn.pData_,stdIn.size_));
+        Exiv2::BasicIo::UniquePtr ioStdin = Exiv2::BasicIo::UniquePtr(new Exiv2::MemIo(stdIn.pData_,stdIn.size_));
 
-        Exiv2::Image::AutoPtr sourceImage = bStdin ? Exiv2::ImageFactory::open(ioStdin) : Exiv2::ImageFactory::open(source);
+        Exiv2::Image::UniquePtr sourceImage = bStdin ? Exiv2::ImageFactory::open(std::move(ioStdin)) : Exiv2::ImageFactory::open(source);
         assert(sourceImage.get() != 0);
         sourceImage->readMetadata();
 
@@ -2099,7 +2099,7 @@
         // Open or create the target file
         std::string target(bStdout ? temporaryPath() : tgt);
 
-        Exiv2::Image::AutoPtr targetImage;
+        Exiv2::Image::UniquePtr targetImage;
         if (Exiv2::fileExists(target)) {
             targetImage = Exiv2::ImageFactory::open(target);
             assert(targetImage.get() != 0);
@@ -2356,7 +2356,7 @@
                       << _("Failed to open the file\n");
             return -1;
         }
-        Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(path);
+        Exiv2::Image::UniquePtr image = Exiv2::ImageFactory::open(path);
         assert(image.get() != 0);
         image->printStructure(out,option);
         return 0;
diff -Naur exiv2-0.27.2-Source/src/actions.hpp exiv2-0.27.2-Source.new/src/actions.hpp
--- exiv2-0.27.2-Source/src/actions.hpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/actions.hpp	2020-02-12 16:33:01.224523709 +0300
@@ -65,11 +65,11 @@
     class Task {
     public:
         //! Shortcut for an auto pointer.
-        typedef std::auto_ptr<Task> AutoPtr;
+        typedef std::unique_ptr<Task> UniquePtr;
         //! Virtual destructor.
         virtual ~Task();
         //! Virtual copy construction.
-        AutoPtr clone() const;
+        UniquePtr clone() const;
         /*!
           @brief Application interface to perform a task.
 
@@ -113,7 +113,7 @@
                   returned auto pointer and take appropriate action (e.g., throw
                   an exception) if it is 0.
          */
-        Task::AutoPtr create(TaskType type);
+        Task::UniquePtr create(TaskType type);
 
         /*!
           @brief Register a task prototype together with its type.
@@ -127,7 +127,7 @@
           @param task Pointer to the prototype. Ownership is transferred to the
                  task factory. That's what the auto pointer indicates.
         */
-        void registerTask(TaskType type, Task::AutoPtr task);
+        void registerTask(TaskType type, Task::UniquePtr task);
 
     private:
         //! Prevent construction other than through instance().
@@ -149,8 +149,8 @@
     public:
         virtual ~Print();
         virtual int run(const std::string& path);
-        typedef std::auto_ptr<Print> AutoPtr;
-        AutoPtr clone() const;
+        typedef std::unique_ptr<Print> UniquePtr;
+        UniquePtr clone() const;
 
         //! Print the Jpeg comment
         int printComment();
@@ -204,8 +204,8 @@
     public:
         virtual ~Rename();
         virtual int run(const std::string& path);
-        typedef std::auto_ptr<Rename> AutoPtr;
-        AutoPtr clone() const;
+        typedef std::unique_ptr<Rename> UniquePtr;
+        UniquePtr clone() const;
 
     private:
         virtual Rename* clone_() const;
@@ -216,8 +216,8 @@
     public:
         virtual ~Adjust();
         virtual int run(const std::string& path);
-        typedef std::auto_ptr<Adjust> AutoPtr;
-        AutoPtr clone() const;
+        typedef std::unique_ptr<Adjust> UniquePtr;
+        UniquePtr clone() const;
 
     private:
         virtual Adjust* clone_() const;
@@ -239,8 +239,8 @@
     public:
         virtual ~Erase();
         virtual int run(const std::string& path);
-        typedef std::auto_ptr<Erase> AutoPtr;
-        AutoPtr clone() const;
+        typedef std::unique_ptr<Erase> UniquePtr;
+        UniquePtr clone() const;
 
         /*!
           @brief Delete the thumbnail image, incl IFD1 metadata from the file.
@@ -281,8 +281,8 @@
     public:
         virtual ~Extract();
         virtual int run(const std::string& path);
-        typedef std::auto_ptr<Extract> AutoPtr;
-        AutoPtr clone() const;
+        typedef std::unique_ptr<Extract> UniquePtr;
+        UniquePtr clone() const;
 
         /*!
           @brief Write the thumbnail image to a file. The filename is composed by
@@ -320,8 +320,8 @@
     public:
         virtual ~Insert();
         virtual int run(const std::string& path);
-        typedef std::auto_ptr<Insert> AutoPtr;
-        AutoPtr clone() const;
+        typedef std::unique_ptr<Insert> UniquePtr;
+        UniquePtr clone() const;
 
         /*!
           @brief Insert a Jpeg thumbnail image from a file into file \em path.
@@ -361,15 +361,15 @@
     public:
         virtual ~Modify();
         virtual int run(const std::string& path);
-        typedef std::auto_ptr<Modify> AutoPtr;
-        AutoPtr clone() const;
+        typedef std::unique_ptr<Modify> UniquePtr;
+        UniquePtr clone() const;
         Modify() {}
         //! Apply modification commands to the \em pImage, return 0 if successful.
         static int applyCommands(Exiv2::Image* pImage);
 
     private:
         virtual Modify* clone_() const;
-        //! Copy constructor needed because of AutoPtr member
+        //! Copy constructor needed because of UniquePtr member
         Modify(const Modify& /*src*/) : Task() {}
 
         //! Add a metadatum to \em pImage according to \em modifyCmd
@@ -394,8 +394,8 @@
     public:
         virtual ~FixIso();
         virtual int run(const std::string& path);
-        typedef std::auto_ptr<FixIso> AutoPtr;
-        AutoPtr clone() const;
+        typedef std::unique_ptr<FixIso> UniquePtr;
+        UniquePtr clone() const;
 
     private:
         virtual FixIso* clone_() const;
@@ -412,8 +412,8 @@
     public:
         virtual ~FixCom();
         virtual int run(const std::string& path);
-        typedef std::auto_ptr<FixCom> AutoPtr;
-        AutoPtr clone() const;
+        typedef std::unique_ptr<FixCom> UniquePtr;
+        UniquePtr clone() const;
 
     private:
         virtual FixCom* clone_() const;
diff -Naur exiv2-0.27.2-Source/src/asfvideo.cpp exiv2-0.27.2-Source.new/src/asfvideo.cpp
--- exiv2-0.27.2-Source/src/asfvideo.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/asfvideo.cpp	2020-02-12 17:20:20.482539423 +0300
@@ -291,8 +291,8 @@
 
     using namespace Exiv2::Internal;
 
-    AsfVideo::AsfVideo(BasicIo::AutoPtr io)
-        : Image(ImageType::asf, mdNone, io)
+    AsfVideo::AsfVideo(BasicIo::UniquePtr io)
+        : Image(ImageType::asf, mdNone, std::move(io))
     {
     } // AsfVideo::AsfVideo
 
@@ -371,7 +371,7 @@
         DataBuf buf(1000);
         unsigned long count = 0, tempLength = 0;
         buf.pData_[4] = '\0' ;
-        Exiv2::Value::AutoPtr v = Exiv2::Value::create(Exiv2::xmpSeq);
+        Exiv2::Value::UniquePtr v = Exiv2::Value::create(Exiv2::xmpSeq);
 
         if(compareTag( exvGettext(tv->label_), "Header")) {
             localPosition_ = 0;
@@ -623,7 +623,7 @@
         DataBuf buf(5000);
         io_->read(buf.pData_, 2);
         int recordCount = Exiv2::getUShort(buf.pData_, littleEndian), nameLength = 0, dataLength = 0, dataType = 0;
-        Exiv2::Value::AutoPtr v = Exiv2::Value::create(Exiv2::xmpSeq);
+        Exiv2::Value::UniquePtr v = Exiv2::Value::create(Exiv2::xmpSeq);
         byte guidBuf[16];   char fileID[37] = "";
 
         while(recordCount--) {
@@ -785,9 +785,9 @@
     } // AsfVideo::aspectRatio
 
 
-    Image::AutoPtr newAsfInstance(BasicIo::AutoPtr io, bool /*create*/)
+    Image::UniquePtr newAsfInstance(BasicIo::UniquePtr io, bool /*create*/)
     {
-        Image::AutoPtr image(new AsfVideo(io));
+        Image::UniquePtr image(new AsfVideo(io));
         if (!image->good()) {
             image.reset();
         }
diff -Naur exiv2-0.27.2-Source/src/bigtiffimage.cpp exiv2-0.27.2-Source.new/src/bigtiffimage.cpp
--- exiv2-0.27.2-Source/src/bigtiffimage.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/bigtiffimage.cpp	2020-02-12 16:59:51.270822252 +0300
@@ -146,8 +146,8 @@
         class BigTiffImage: public Image
         {
             public:
-                BigTiffImage(BasicIo::AutoPtr io):
-                    Image(ImageType::bigtiff, mdExif, io),
+                BigTiffImage(BasicIo::UniquePtr io):
+                    Image(ImageType::bigtiff, mdExif, std::move(io)),
                     header_(),
                     dataSize_(0),
                     doSwap_(false)
@@ -438,9 +438,9 @@
     }
 
 
-    Image::AutoPtr newBigTiffInstance(BasicIo::AutoPtr io, bool)
+    Image::UniquePtr newBigTiffInstance(BasicIo::UniquePtr io, bool)
     {
-        return Image::AutoPtr(new BigTiffImage(io));
+        return Image::UniquePtr(new BigTiffImage(std::move(io)));
     }
 
 
diff -Naur exiv2-0.27.2-Source/src/bmpimage.cpp exiv2-0.27.2-Source.new/src/bmpimage.cpp
--- exiv2-0.27.2-Source/src/bmpimage.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/bmpimage.cpp	2020-02-12 17:00:36.930008934 +0300
@@ -41,7 +41,7 @@
 // class member definitions
 namespace Exiv2
 {
-    BmpImage::BmpImage(BasicIo::AutoPtr io) : Image(ImageType::bmp, mdNone, io)
+    BmpImage::BmpImage(BasicIo::UniquePtr io) : Image(ImageType::bmp, mdNone, std::move(io))
     {
     }
 
@@ -120,9 +120,9 @@
 
     // *************************************************************************
     // free functions
-    Image::AutoPtr newBmpInstance(BasicIo::AutoPtr io, bool /*create*/)
+    Image::UniquePtr newBmpInstance(BasicIo::UniquePtr io, bool /*create*/)
     {
-        Image::AutoPtr image(new BmpImage(io));
+        Image::UniquePtr image(new BmpImage(std::move(io)));
         if (!image->good()) {
             image.reset();
         }
diff -Naur exiv2-0.27.2-Source/src/cr2image.cpp exiv2-0.27.2-Source.new/src/cr2image.cpp
--- exiv2-0.27.2-Source/src/cr2image.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/cr2image.cpp	2020-02-12 17:01:22.151193184 +0300
@@ -46,8 +46,8 @@
 
     using namespace Internal;
 
-    Cr2Image::Cr2Image(BasicIo::AutoPtr io, bool /*create*/)
-        : Image(ImageType::cr2, mdExif | mdIptc | mdXmp, io)
+    Cr2Image::Cr2Image(BasicIo::UniquePtr io, bool /*create*/)
+        : Image(ImageType::cr2, mdExif | mdIptc | mdXmp, std::move(io))
     {
     } // Cr2Image::Cr2Image
 
@@ -183,7 +183,7 @@
                      ed.end());
         }
 
-        std::auto_ptr<TiffHeaderBase> header(new Cr2Header(byteOrder));
+        std::unique_ptr<TiffHeaderBase> header(new Cr2Header(byteOrder));
         OffsetWriter offsetWriter;
         offsetWriter.setOrigin(OffsetWriter::cr2RawIfdOffset, Cr2Header::offset2addr(), byteOrder);
         return TiffParserWorker::encode(io,
@@ -200,9 +200,9 @@
 
     // *************************************************************************
     // free functions
-    Image::AutoPtr newCr2Instance(BasicIo::AutoPtr io, bool create)
+    Image::UniquePtr newCr2Instance(BasicIo::UniquePtr io, bool create)
     {
-        Image::AutoPtr image(new Cr2Image(io, create));
+        Image::UniquePtr image(new Cr2Image(std::move(io), create));
         if (!image->good()) {
             image.reset();
         }
diff -Naur exiv2-0.27.2-Source/src/crwimage.cpp exiv2-0.27.2-Source.new/src/crwimage.cpp
--- exiv2-0.27.2-Source/src/crwimage.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/crwimage.cpp	2020-02-12 17:02:29.453466337 +0300
@@ -52,8 +52,8 @@
 
     using namespace Internal;
 
-    CrwImage::CrwImage(BasicIo::AutoPtr io, bool /*create*/)
-        : Image(ImageType::crw, mdExif | mdComment, io)
+    CrwImage::CrwImage(BasicIo::UniquePtr io, bool /*create*/)
+        : Image(ImageType::crw, mdExif | mdComment, std::move(io))
     {
     } // CrwImage::CrwImage
 
@@ -132,7 +132,7 @@
         CrwParser::encode(blob, buf.pData_, buf.size_, this);
 
         // Write new buffer to file
-        MemIo::AutoPtr tempIo(new MemIo);
+        MemIo::UniquePtr tempIo(new MemIo);
         assert(tempIo.get() != 0);
         tempIo->write((blob.size() > 0 ? &blob[0] : 0), static_cast<long>(blob.size()));
         io_->close();
@@ -146,7 +146,7 @@
         assert(pData != 0);
 
         // Parse the image, starting with a CIFF header component
-        CiffHeader::AutoPtr head(new CiffHeader);
+        CiffHeader::UniquePtr head(new CiffHeader);
         head->read(pData, size);
 #ifdef EXIV2_DEBUG_MESSAGES
         head->print(std::cerr);
@@ -169,7 +169,7 @@
     )
     {
         // Parse image, starting with a CIFF header component
-        CiffHeader::AutoPtr head(new CiffHeader);
+        CiffHeader::UniquePtr head(new CiffHeader);
         if (size != 0) {
             head->read(pData, size);
         }
@@ -183,9 +183,9 @@
 
     // *************************************************************************
     // free functions
-    Image::AutoPtr newCrwInstance(BasicIo::AutoPtr io, bool create)
+    Image::UniquePtr newCrwInstance(BasicIo::UniquePtr io, bool create)
     {
-        Image::AutoPtr image(new CrwImage(io, create));
+        Image::UniquePtr image(new CrwImage(std::move(io), create));
         if (!image->good()) {
             image.reset();
         }
diff -Naur exiv2-0.27.2-Source/src/crwimage_int.cpp exiv2-0.27.2-Source.new/src/crwimage_int.cpp
--- exiv2-0.27.2-Source/src/crwimage_int.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/crwimage_int.cpp	2020-02-12 16:42:57.126287175 +0300
@@ -178,17 +178,17 @@
         }
     }
 
-    void CiffComponent::add(AutoPtr component)
+    void CiffComponent::add(UniquePtr component)
     {
-        doAdd(component);
+        doAdd(std::move(component));
     }
 
-    void CiffEntry::doAdd(AutoPtr /*component*/)
+    void CiffEntry::doAdd(UniquePtr /*component*/)
     {
         throw Error(kerFunctionNotSupported, "CiffEntry::add");
     } // CiffEntry::doAdd
 
-    void CiffDirectory::doAdd(AutoPtr component)
+    void CiffDirectory::doAdd(UniquePtr component)
     {
         components_.push_back(component.release());
     } // CiffDirectory::doAdd
@@ -294,14 +294,14 @@
 
         for (uint16_t i = 0; i < count; ++i) {
             uint16_t tag = getUShort(pData + o, byteOrder);
-            CiffComponent::AutoPtr m;
+            CiffComponent::UniquePtr m;
             switch (CiffComponent::typeId(tag)) {
-            case directory: m = CiffComponent::AutoPtr(new CiffDirectory); break;
-            default: m = CiffComponent::AutoPtr(new CiffEntry); break;
+            case directory: m = CiffComponent::UniquePtr(new CiffDirectory); break;
+            default: m = CiffComponent::UniquePtr(new CiffEntry); break;
             }
             m->setDir(this->tag());
             m->read(pData, size, o, byteOrder);
-            add(m);
+            add(std::move(m));
             o += 10;
         }
     }  // CiffDirectory::readDirectory
@@ -515,7 +515,7 @@
            << ", " << _("size") << " = " << std::dec << size_
            << ", " << _("offset") << " = " << offset_ << "\n";
 
-        Value::AutoPtr value;
+        Value::UniquePtr value;
         if (typeId() != directory) {
             value = Value::create(typeId());
             value->read(pData_, size_, byteOrder);
@@ -671,9 +671,9 @@
             }
             if (cc_ == 0) {
                 // Directory doesn't exist yet, add it
-                m_ = AutoPtr(new CiffDirectory(csd.crwDir_, csd.parent_));
+                m_ = UniquePtr(new CiffDirectory(csd.crwDir_, csd.parent_));
                 cc_ = m_.get();
-                add(m_);
+                add(std::move(m_));
             }
             // Recursive call to next lower level directory
             cc_ = cc_->add(crwDirs, crwTagId);
@@ -688,9 +688,9 @@
             }
             if (cc_ == 0) {
                 // Tag doesn't exist yet, add it
-                m_ = AutoPtr(new CiffEntry(crwTagId, tag()));
+                m_ = UniquePtr(new CiffEntry(crwTagId, tag()));
                 cc_ = m_.get();
-                add(m_);
+                add(std::move(m_));
             }
         }
         return cc_;
@@ -806,7 +806,7 @@
 
         // Make
         ExifKey key1("Exif.Image.Make");
-        Value::AutoPtr value1 = Value::create(ciffComponent.typeId());
+        Value::UniquePtr value1 = Value::create(ciffComponent.typeId());
         uint32_t i = 0;
         for (;    i < ciffComponent.size()
                && ciffComponent.pData()[i] != '\0'; ++i) {
@@ -817,7 +817,7 @@
 
         // Model
         ExifKey key2("Exif.Image.Model");
-        Value::AutoPtr value2 = Value::create(ciffComponent.typeId());
+        Value::UniquePtr value2 = Value::create(ciffComponent.typeId());
         uint32_t j = i;
         for (;    i < ciffComponent.size()
                && ciffComponent.pData()[i] != '\0'; ++i) {
@@ -952,7 +952,7 @@
         assert(pCrwMapping != 0);
         // create a key and value pair
         ExifKey key(pCrwMapping->tag_, Internal::groupName(pCrwMapping->ifdId_));
-        Value::AutoPtr value;
+        Value::UniquePtr value;
         if (ciffComponent.typeId() != directory) {
             value = Value::create(ciffComponent.typeId());
             uint32_t size = 0;
diff -Naur exiv2-0.27.2-Source/src/crwimage_int.hpp exiv2-0.27.2-Source.new/src/crwimage_int.hpp
--- exiv2-0.27.2-Source/src/crwimage_int.hpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/crwimage_int.hpp	2020-02-12 17:08:29.517911558 +0300
@@ -90,8 +90,8 @@
      */
     class CiffComponent {
     public:
-        //! CiffComponent auto_ptr type
-        typedef std::auto_ptr<CiffComponent> AutoPtr;
+        //! CiffComponent unique_ptr type
+        typedef std::unique_ptr<CiffComponent> UniquePtr;
         //! Container type to hold all metadata
         typedef std::vector<CiffComponent*> Components;
 
@@ -114,7 +114,7 @@
         // Default assignment operator is fine
 
         //! Add a component to the composition
-        void add(AutoPtr component);
+        void add(UniquePtr component);
         /*!
           @brief Add \em crwTagId to the parse tree, if it doesn't exist
                  yet. \em crwDirs contains the path of subdirectories, starting
@@ -257,7 +257,7 @@
         //! @name Manipulators
         //@{
         //! Implements add()
-        virtual void doAdd(AutoPtr component) =0;
+        virtual void doAdd(UniquePtr component) =0;
         //! Implements add(). The default implementation does nothing.
         virtual CiffComponent* doAdd(CrwDirs& crwDirs, uint16_t crwTagId);
         //! Implements remove(). The default implementation does nothing.
@@ -328,7 +328,7 @@
         //@{
         using CiffComponent::doAdd;
         // See base class comment
-        virtual void doAdd(AutoPtr component);
+        virtual void doAdd(UniquePtr component);
         /*!
           @brief Implements write(). Writes only the value data of the entry,
                  using writeValueData().
@@ -380,7 +380,7 @@
         //! @name Manipulators
         //@{
         // See base class comment
-        virtual void doAdd(AutoPtr component);
+        virtual void doAdd(UniquePtr component);
         // See base class comment
         virtual CiffComponent* doAdd(CrwDirs& crwDirs, uint16_t crwTagId);
         // See base class comment
@@ -421,7 +421,7 @@
     private:
         // DATA
         Components components_; //!< List of components in this dir
-        AutoPtr    m_; // used by recursive doAdd
+        UniquePtr    m_; // used by recursive doAdd
         CiffComponent* cc_;
 
     }; // class CiffDirectory
@@ -434,8 +434,8 @@
      */
     class CiffHeader {
     public:
-        //! CiffHeader auto_ptr type
-        typedef std::auto_ptr<CiffHeader> AutoPtr;
+        //! CiffHeader unique_ptr type
+        typedef std::unique_ptr<CiffHeader> UniquePtr;
 
         //! @name Creators
         //@{
diff -Naur exiv2-0.27.2-Source/src/datasets.cpp exiv2-0.27.2-Source.new/src/datasets.cpp
--- exiv2-0.27.2-Source/src/datasets.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/datasets.cpp	2020-02-12 16:33:01.942529434 +0300
@@ -656,9 +656,9 @@
         return record_;
     }
 
-    IptcKey::AutoPtr IptcKey::clone() const
+    IptcKey::UniquePtr IptcKey::clone() const
     {
-        return AutoPtr(clone_());
+        return UniquePtr(clone_());
     }
 
     IptcKey* IptcKey::clone_() const
diff -Naur exiv2-0.27.2-Source/src/epsimage.cpp exiv2-0.27.2-Source.new/src/epsimage.cpp
--- exiv2-0.27.2-Source/src/epsimage.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/epsimage.cpp	2020-02-12 17:03:17.692661415 +0300
@@ -805,7 +805,7 @@
             }
 
             // create temporary output file
-            BasicIo::AutoPtr tempIo(new MemIo);
+            BasicIo::UniquePtr tempIo(new MemIo);
             assert (tempIo.get() != 0);
             if (!tempIo->isopen()) {
                 #ifndef SUPPRESS_WARNINGS
@@ -1075,8 +1075,8 @@
 namespace Exiv2
 {
 
-    EpsImage::EpsImage(BasicIo::AutoPtr io, bool create)
-            : Image(ImageType::eps, mdXmp, io)
+    EpsImage::EpsImage(BasicIo::UniquePtr io, bool create)
+            : Image(ImageType::eps, mdXmp, std::move(io))
     {
         //LogMsg::setLevel(LogMsg::debug);
         if (create) {
@@ -1151,9 +1151,9 @@
 
     // *************************************************************************
     // free functions
-    Image::AutoPtr newEpsInstance(BasicIo::AutoPtr io, bool create)
+    Image::UniquePtr newEpsInstance(BasicIo::UniquePtr io, bool create)
     {
-        Image::AutoPtr image(new EpsImage(io, create));
+        Image::UniquePtr image(new EpsImage(std::move(io), create));
         if (!image->good()) {
             image.reset();
         }
diff -Naur exiv2-0.27.2-Source/src/exif.cpp exiv2-0.27.2-Source.new/src/exif.cpp
--- exiv2-0.27.2-Source/src/exif.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/exif.cpp	2020-02-12 17:07:40.012714110 +0300
@@ -80,7 +80,7 @@
     class Thumbnail {
     public:
         //! Shortcut for a %Thumbnail auto pointer.
-        typedef std::auto_ptr<Thumbnail> AutoPtr;
+        typedef std::unique_ptr<Thumbnail> UniquePtr;
 
         //! @name Creators
         //@{
@@ -89,7 +89,7 @@
         //@}
 
         //! Factory function to create a thumbnail for the Exif metadata provided.
-        static AutoPtr create(const Exiv2::ExifData& exifData);
+        static UniquePtr create(const Exiv2::ExifData& exifData);
 
         //! @name Accessors
         //@{
@@ -123,7 +123,7 @@
     class TiffThumbnail : public Thumbnail {
     public:
         //! Shortcut for a %TiffThumbnail auto pointer.
-        typedef std::auto_ptr<TiffThumbnail> AutoPtr;
+        typedef std::unique_ptr<TiffThumbnail> UniquePtr;
 
         //! @name Manipulators
         //@{
@@ -147,7 +147,7 @@
     class JpegThumbnail : public Thumbnail {
     public:
         //! Shortcut for a %JpegThumbnail auto pointer.
-        typedef std::auto_ptr<JpegThumbnail> AutoPtr;
+        typedef std::unique_ptr<JpegThumbnail> UniquePtr;
 
         //! @name Manipulators
         //@{
@@ -192,10 +192,10 @@
     template<typename T>
     Exiv2::Exifdatum& setValue(Exiv2::Exifdatum& exifDatum, const T& value)
     {
-        std::auto_ptr<Exiv2::ValueType<T> > v
-            = std::auto_ptr<Exiv2::ValueType<T> >(new Exiv2::ValueType<T>);
+        std::unique_ptr<Exiv2::ValueType<T> > v
+            = std::unique_ptr<Exiv2::ValueType<T> >(new Exiv2::ValueType<T>);
         v->value_.push_back(value);
-        exifDatum.value_ = v;
+        exifDatum.value_ = std::move(v);
         return exifDatum;
     }
 
@@ -407,9 +407,9 @@
         return value_.get() == 0 ? Rational(-1, 1) : value_->toRational(n);
     }
 
-    Value::AutoPtr Exifdatum::getValue() const
+    Value::UniquePtr Exifdatum::getValue() const
     {
-        return value_.get() == 0 ? Value::AutoPtr(0) : value_->clone();
+        return value_.get() == 0 ? Value::UniquePtr(nullptr) : value_->clone();
     }
 
     long Exifdatum::sizeDataArea() const
@@ -429,14 +429,14 @@
 
     DataBuf ExifThumbC::copy() const
     {
-        Thumbnail::AutoPtr thumbnail = Thumbnail::create(exifData_);
+        Thumbnail::UniquePtr thumbnail = Thumbnail::create(exifData_);
         if (thumbnail.get() == 0) return DataBuf();
         return thumbnail->copy(exifData_);
     }
 
     long ExifThumbC::writeFile(const std::string& path) const
     {
-        Thumbnail::AutoPtr thumbnail = Thumbnail::create(exifData_);
+        Thumbnail::UniquePtr thumbnail = Thumbnail::create(exifData_);
         if (thumbnail.get() == 0) return 0;
         std::string name = path + thumbnail->extension();
         DataBuf buf(thumbnail->copy(exifData_));
@@ -447,7 +447,7 @@
 #ifdef EXV_UNICODE_PATH
     long ExifThumbC::writeFile(const std::wstring& wpath) const
     {
-        Thumbnail::AutoPtr thumbnail = Thumbnail::create(exifData_);
+        Thumbnail::UniquePtr thumbnail = Thumbnail::create(exifData_);
         if (thumbnail.get() == 0) return 0;
         std::wstring name = wpath + thumbnail->wextension();
         DataBuf buf(thumbnail->copy(exifData_));
@@ -458,14 +458,14 @@
 #endif
     const char* ExifThumbC::mimeType() const
     {
-        Thumbnail::AutoPtr thumbnail = Thumbnail::create(exifData_);
+        Thumbnail::UniquePtr thumbnail = Thumbnail::create(exifData_);
         if (thumbnail.get() == 0) return "";
         return thumbnail->mimeType();
     }
 
     const char* ExifThumbC::extension() const
     {
-        Thumbnail::AutoPtr thumbnail = Thumbnail::create(exifData_);
+        Thumbnail::UniquePtr thumbnail = Thumbnail::create(exifData_);
         if (thumbnail.get() == 0) return "";
         return thumbnail->extension();
     }
@@ -473,7 +473,7 @@
 #ifdef EXV_UNICODE_PATH
     const wchar_t* ExifThumbC::wextension() const
     {
-        Thumbnail::AutoPtr thumbnail = Thumbnail::create(exifData_);
+        Thumbnail::UniquePtr thumbnail = Thumbnail::create(exifData_);
         if (thumbnail.get() == 0) return EXV_WIDEN("");
         return thumbnail->wextension();
     }
@@ -701,7 +701,7 @@
 
         // Encode and check if the result fits into a JPEG Exif APP1 segment
         MemIo mio1;
-        std::auto_ptr<TiffHeaderBase> header(new TiffHeader(byteOrder, 0x00000008, false));
+        std::unique_ptr<TiffHeaderBase> header(new TiffHeader(byteOrder, 0x00000008, false));
         WriteMethod wm = TiffParserWorker::encode(mio1,
                                                   pData,
                                                   size,
@@ -835,26 +835,26 @@
 namespace {
 
     //! @cond IGNORE
-    Thumbnail::AutoPtr Thumbnail::create(const Exiv2::ExifData& exifData)
+    Thumbnail::UniquePtr Thumbnail::create(const Exiv2::ExifData& exifData)
     {
-        Thumbnail::AutoPtr thumbnail;
+        Thumbnail::UniquePtr thumbnail;
         const Exiv2::ExifKey k1("Exif.Thumbnail.Compression");
         Exiv2::ExifData::const_iterator pos = exifData.findKey(k1);
         if (pos != exifData.end()) {
             if (pos->count() == 0) return thumbnail;
             long compression = pos->toLong();
             if (compression == 6) {
-                thumbnail = Thumbnail::AutoPtr(new JpegThumbnail);
+                thumbnail = Thumbnail::UniquePtr(new JpegThumbnail);
             }
             else {
-                thumbnail = Thumbnail::AutoPtr(new TiffThumbnail);
+                thumbnail = Thumbnail::UniquePtr(new TiffThumbnail);
             }
         }
         else {
             const Exiv2::ExifKey k2("Exif.Thumbnail.JPEGInterchangeFormat");
             pos = exifData.findKey(k2);
             if (pos != exifData.end()) {
-                thumbnail = Thumbnail::AutoPtr(new JpegThumbnail);
+                thumbnail = Thumbnail::UniquePtr(new JpegThumbnail);
             }
         }
         return thumbnail;
diff -Naur exiv2-0.27.2-Source/src/exiv2.cpp exiv2-0.27.2-Source.new/src/exiv2.cpp
--- exiv2-0.27.2-Source/src/exiv2.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/exiv2.cpp	2020-02-12 16:33:02.207531545 +0300
@@ -154,7 +154,7 @@
     try {
         // Create the required action class
         Action::TaskFactory& taskFactory = Action::TaskFactory::instance();
-        Action::Task::AutoPtr task = taskFactory.create(Action::TaskType(params.action_));
+        Action::Task::UniquePtr task = taskFactory.create(Action::TaskType(params.action_));
         assert(task.get());
 
         // Process all files
diff -Naur exiv2-0.27.2-Source/src/gifimage.cpp exiv2-0.27.2-Source.new/src/gifimage.cpp
--- exiv2-0.27.2-Source/src/gifimage.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/gifimage.cpp	2020-02-12 17:09:15.460094523 +0300
@@ -41,8 +41,8 @@
 // class member definitions
 namespace Exiv2 {
 
-    GifImage::GifImage(BasicIo::AutoPtr io)
-        : Image(ImageType::gif, mdNone, io)
+    GifImage::GifImage(BasicIo::UniquePtr io)
+        : Image(ImageType::gif, mdNone, std::move(io))
     {
     } // GifImage::GifImage
 
@@ -103,9 +103,9 @@
 
     // *************************************************************************
     // free functions
-    Image::AutoPtr newGifInstance(BasicIo::AutoPtr io, bool /*create*/)
+    Image::UniquePtr newGifInstance(BasicIo::UniquePtr io, bool /*create*/)
     {
-        Image::AutoPtr image(new GifImage(io));
+        Image::UniquePtr image(new GifImage(std::move(io)));
         if (!image->good())
         {
             image.reset();
diff -Naur exiv2-0.27.2-Source/src/image.cpp exiv2-0.27.2-Source.new/src/image.cpp
--- exiv2-0.27.2-Source/src/image.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/image.cpp	2020-02-12 17:12:59.235982654 +0300
@@ -150,8 +150,8 @@
 
     Image::Image(int              imageType,
                  uint16_t         supportedMetadata,
-                 BasicIo::AutoPtr io)
-        : io_(io),
+                 BasicIo::UniquePtr io)
+        : io_(std::move(io)),
           pixelWidth_(0),
           pixelHeight_(0),
           imageType_(imageType),
@@ -839,143 +839,143 @@
         return ImageType::none;
     } // ImageFactory::getType
 
-    BasicIo::AutoPtr ImageFactory::createIo(const std::string& path, bool useCurl)
+    BasicIo::UniquePtr ImageFactory::createIo(const std::string& path, bool useCurl)
     {
         Protocol fProt = fileProtocol(path);
 
 #ifdef EXV_USE_SSH
         if (fProt == pSsh || fProt == pSftp) {
-            return BasicIo::AutoPtr(new SshIo(path)); // may throw
+            return BasicIo::UniquePtr(new SshIo(path)); // may throw
         }
 #endif
 
 #ifdef EXV_USE_CURL
         if (useCurl && (fProt == pHttp || fProt == pHttps || fProt == pFtp)) {
-            return BasicIo::AutoPtr(new CurlIo(path)); // may throw
+            return BasicIo::UniquePtr(new CurlIo(path)); // may throw
         }
 #endif
 
         if (fProt == pHttp)
-            return BasicIo::AutoPtr(new HttpIo(path)); // may throw
+            return BasicIo::UniquePtr(new HttpIo(path)); // may throw
         if (fProt == pFileUri)
-            return BasicIo::AutoPtr(new FileIo(pathOfFileUrl(path)));
+            return BasicIo::UniquePtr(new FileIo(pathOfFileUrl(path)));
         if (fProt == pStdin || fProt == pDataUri)
-            return BasicIo::AutoPtr(new XPathIo(path)); // may throw
+            return BasicIo::UniquePtr(new XPathIo(path)); // may throw
 
-        return BasicIo::AutoPtr(new FileIo(path));
+        return BasicIo::UniquePtr(new FileIo(path));
 
         (void)(useCurl);
     } // ImageFactory::createIo
 
 #ifdef EXV_UNICODE_PATH
-    BasicIo::AutoPtr ImageFactory::createIo(const std::wstring& wpath, bool useCurl)
+    BasicIo::UniquePtr ImageFactory::createIo(const std::wstring& wpath, bool useCurl)
     {
         Protocol fProt = fileProtocol(wpath);
 #if EXV_USE_SSH == 1
         if (fProt == pSsh || fProt == pSftp) {
-            return BasicIo::AutoPtr(new SshIo(wpath));
+            return BasicIo::UniquePtr(new SshIo(wpath));
         }
 #endif
 #if EXV_USE_CURL == 1
         if (useCurl && (fProt == pHttp || fProt == pHttps || fProt == pFtp)) {
-            return BasicIo::AutoPtr(new CurlIo(wpath));
+            return BasicIo::UniquePtr(new CurlIo(wpath));
         }
 #endif
         if (fProt == pHttp)
-            return BasicIo::AutoPtr(new HttpIo(wpath));
+            return BasicIo::UniquePtr(new HttpIo(wpath));
         if (fProt == pFileUri)
-            return BasicIo::AutoPtr(new FileIo(pathOfFileUrl(wpath)));
+            return BasicIo::UniquePtr(new FileIo(pathOfFileUrl(wpath)));
         if (fProt == pStdin || fProt == pDataUri)
-            return BasicIo::AutoPtr(new XPathIo(wpath)); // may throw
-        return BasicIo::AutoPtr(new FileIo(wpath));
+            return BasicIo::UniquePtr(new XPathIo(wpath)); // may throw
+        return BasicIo::UniquePtr(new FileIo(wpath));
     } // ImageFactory::createIo
 #endif
-    Image::AutoPtr ImageFactory::open(const std::string& path, bool useCurl)
+    Image::UniquePtr ImageFactory::open(const std::string& path, bool useCurl)
     {
-        Image::AutoPtr image = open(ImageFactory::createIo(path, useCurl)); // may throw
+        Image::UniquePtr image = open(ImageFactory::createIo(path, useCurl)); // may throw
         if (image.get() == 0) throw Error(kerFileContainsUnknownImageType, path);
         return image;
     }
 
 #ifdef EXV_UNICODE_PATH
-    Image::AutoPtr ImageFactory::open(const std::wstring& wpath, bool useCurl)
+    Image::UniquePtr ImageFactory::open(const std::wstring& wpath, bool useCurl)
     {
-        Image::AutoPtr image = open(ImageFactory::createIo(wpath, useCurl)); // may throw
+        Image::UniquePtr image = open(ImageFactory::createIo(wpath, useCurl)); // may throw
         if (image.get() == 0) throw WError(kerFileContainsUnknownImageType, wpath);
         return image;
     }
 
 #endif
-    Image::AutoPtr ImageFactory::open(const byte* data, long size)
+    Image::UniquePtr ImageFactory::open(const byte* data, long size)
     {
-        BasicIo::AutoPtr io(new MemIo(data, size));
-        Image::AutoPtr image = open(io); // may throw
+        BasicIo::UniquePtr io(new MemIo(data, size));
+        Image::UniquePtr image = open(std::move(io)); // may throw
         if (image.get() == 0) throw Error(kerMemoryContainsUnknownImageType);
         return image;
     }
 
-    Image::AutoPtr ImageFactory::open(BasicIo::AutoPtr io)
+    Image::UniquePtr ImageFactory::open(BasicIo::UniquePtr io)
     {
         if (io->open() != 0) {
             throw Error(kerDataSourceOpenFailed, io->path(), strError());
         }
         for (unsigned int i = 0; registry[i].imageType_ != ImageType::none; ++i) {
             if (registry[i].isThisType_(*io, false)) {
-                return registry[i].newInstance_(io, false);
+                return registry[i].newInstance_(std::move(io), false);
             }
         }
-        return Image::AutoPtr();
+        return Image::UniquePtr();
     } // ImageFactory::open
 
-    Image::AutoPtr ImageFactory::create(int type,
+    Image::UniquePtr ImageFactory::create(int type,
                                         const std::string& path)
     {
-        std::auto_ptr<FileIo> fileIo(new FileIo(path));
+        std::unique_ptr<FileIo> fileIo(new FileIo(path));
         // Create or overwrite the file, then close it
         if (fileIo->open("w+b") != 0) {
             throw Error(kerFileOpenFailed, path, "w+b", strError());
         }
         fileIo->close();
-        BasicIo::AutoPtr io(fileIo);
-        Image::AutoPtr image = create(type, io);
+        BasicIo::UniquePtr io(std::move(fileIo));
+        Image::UniquePtr image = create(type, std::move(io));
         if (image.get() == 0) throw Error(kerUnsupportedImageType, type);
         return image;
     }
 
 #ifdef EXV_UNICODE_PATH
-    Image::AutoPtr ImageFactory::create(int type,
+    Image::UniquePtr ImageFactory::create(int type,
                                         const std::wstring& wpath)
     {
-        std::auto_ptr<FileIo> fileIo(new FileIo(wpath));
+        std::unique_ptr<FileIo> fileIo(new FileIo(wpath));
         // Create or overwrite the file, then close it
         if (fileIo->open("w+b") != 0) {
             throw WError(kerFileOpenFailed, wpath, "w+b", strError().c_str());
         }
         fileIo->close();
-        BasicIo::AutoPtr io(fileIo);
-        Image::AutoPtr image = create(type, io);
+        BasicIo::UniquePtr io(fileIo);
+        Image::UniquePtr image = create(type, io);
         if (image.get() == 0) throw Error(kerUnsupportedImageType, type);
         return image;
     }
 
 #endif
-    Image::AutoPtr ImageFactory::create(int type)
+    Image::UniquePtr ImageFactory::create(int type)
     {
-        BasicIo::AutoPtr io(new MemIo);
-        Image::AutoPtr image = create(type, io);
+        BasicIo::UniquePtr io(new MemIo);
+        Image::UniquePtr image = create(type, std::move(io));
         if (image.get() == 0) throw Error(kerUnsupportedImageType, type);
         return image;
     }
 
-    Image::AutoPtr ImageFactory::create(int type,
-                                        BasicIo::AutoPtr io)
+    Image::UniquePtr ImageFactory::create(int type,
+                                        BasicIo::UniquePtr io)
     {
         // BasicIo instance does not need to be open
         const Registry* r = find(registry, type);
         if (0 != r) {
-            return r->newInstance_(io, true);
+            return r->newInstance_(std::move(io), true);
         }
-        return Image::AutoPtr();
+        return Image::UniquePtr();
     } // ImageFactory::create
 
 // *****************************************************************************
diff -Naur exiv2-0.27.2-Source/src/iptc.cpp exiv2-0.27.2-Source.new/src/iptc.cpp
--- exiv2-0.27.2-Source/src/iptc.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/iptc.cpp	2020-02-12 17:13:26.422090267 +0300
@@ -203,9 +203,9 @@
         return value_.get() == 0 ? Rational(-1, 1) : value_->toRational(n);
     }
 
-    Value::AutoPtr Iptcdatum::getValue() const
+    Value::UniquePtr Iptcdatum::getValue() const
     {
-        return value_.get() == 0 ? Value::AutoPtr(0) : value_->clone();
+        return value_.get() == 0 ? Value::UniquePtr(nullptr) : value_->clone();
     }
 
     const Value& Iptcdatum::value() const
@@ -230,9 +230,9 @@
 
     Iptcdatum& Iptcdatum::operator=(const uint16_t& value)
     {
-        UShortValue::AutoPtr v(new UShortValue);
+        UShortValue::UniquePtr v(new UShortValue);
         v->value_.push_back(value);
-        value_ = v;
+        value_ = std::move(v);
         return *this;
     }
 
@@ -558,7 +558,7 @@
               uint32_t         sizeData
     )
     {
-        Exiv2::Value::AutoPtr value;
+        Exiv2::Value::UniquePtr value;
         Exiv2::TypeId type = Exiv2::IptcDataSets::dataSetType(dataSet, record);
         value = Exiv2::Value::create(type);
         int rc = value->read(data, sizeData, Exiv2::bigEndian);
diff -Naur exiv2-0.27.2-Source/src/jp2image.cpp exiv2-0.27.2-Source.new/src/jp2image.cpp
--- exiv2-0.27.2-Source/src/jp2image.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/jp2image.cpp	2020-02-12 17:14:01.531229167 +0300
@@ -135,8 +135,8 @@
 namespace Exiv2
 {
 
-    Jp2Image::Jp2Image(BasicIo::AutoPtr io, bool create)
-            : Image(ImageType::jp2, mdExif | mdIptc | mdXmp, io)
+    Jp2Image::Jp2Image(BasicIo::UniquePtr io, bool create)
+            : Image(ImageType::jp2, mdExif | mdIptc | mdXmp, std::move(io))
     {
         if (create)
         {
@@ -574,7 +574,7 @@
                             if (bIsExif && bRecursive && rawData.size_ > 0) {
                                 if ((rawData.pData_[0] == rawData.pData_[1]) &&
                                     (rawData.pData_[0] == 'I' || rawData.pData_[0] == 'M')) {
-                                    BasicIo::AutoPtr p = BasicIo::AutoPtr(new MemIo(rawData.pData_, rawData.size_));
+                                    BasicIo::UniquePtr p = BasicIo::UniquePtr(new MemIo(rawData.pData_, rawData.size_));
                                     printTiffStructure(*p, out, option, depth);
                                 }
                             }
@@ -610,7 +610,7 @@
             throw Error(kerDataSourceOpenFailed, io_->path(), strError());
         }
         IoCloser closer(*io_);
-        BasicIo::AutoPtr tempIo(new MemIo);
+        BasicIo::UniquePtr tempIo(new MemIo);
         assert (tempIo.get() != 0);
 
         doWriteMetadata(*tempIo); // may throw
@@ -930,9 +930,9 @@
 
     // *************************************************************************
     // free functions
-    Image::AutoPtr newJp2Instance(BasicIo::AutoPtr io, bool create)
+    Image::UniquePtr newJp2Instance(BasicIo::UniquePtr io, bool create)
     {
-        Image::AutoPtr image(new Jp2Image(io, create));
+        Image::UniquePtr image(new Jp2Image(std::move(io), create));
         if (!image->good())
         {
             image.reset();
diff -Naur exiv2-0.27.2-Source/src/jpgimage.cpp exiv2-0.27.2-Source.new/src/jpgimage.cpp
--- exiv2-0.27.2-Source/src/jpgimage.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/jpgimage.cpp	2020-02-12 17:15:33.236591613 +0300
@@ -302,9 +302,9 @@
 
     } // Photoshop::setIptcIrb
 
-    JpegBase::JpegBase(int type, BasicIo::AutoPtr io, bool create,
+    JpegBase::JpegBase(int type, BasicIo::UniquePtr io, bool create,
                        const byte initData[], long dataSize)
-        : Image(type, mdExif | mdIptc | mdXmp | mdComment, io)
+        : Image(type, mdExif | mdIptc | mdXmp | mdComment, std::move(io))
     {
         if (create) {
             initImage(initData, dataSize);
@@ -793,7 +793,7 @@
                                 IptcData::printStructure(out, makeSlice(exif, 0, size), depth);
                             } else {
                                 // create a copy on write memio object with the data, then print the structure
-                                BasicIo::AutoPtr p = BasicIo::AutoPtr(new MemIo(exif + start, size - start));
+                                BasicIo::UniquePtr p = BasicIo::UniquePtr(new MemIo(exif + start, size - start));
                                 if (start < max)
                                     printTiffStructure(*p, out, option, depth);
                             }
@@ -871,7 +871,7 @@
             // exiv2 -pS E.jpg
 
             // binary copy io_ to a temporary file
-            BasicIo::AutoPtr tempIo(new MemIo);
+            BasicIo::UniquePtr tempIo(new MemIo);
 
             assert(tempIo.get() != 0);
             for (uint64_t i = 0; i < (count / 2) + 1; i++) {
@@ -904,7 +904,7 @@
             throw Error(kerDataSourceOpenFailed, io_->path(), strError());
         }
         IoCloser closer(*io_);
-        BasicIo::AutoPtr tempIo(new MemIo);
+        BasicIo::UniquePtr tempIo(new MemIo);
         assert (tempIo.get() != 0);
 
         doWriteMetadata(*tempIo); // may throw
@@ -1323,8 +1323,8 @@
         0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xDA,0x00,0x0C,0x03,0x01,0x00,0x02,
         0x11,0x03,0x11,0x00,0x3F,0x00,0xA0,0x00,0x0F,0xFF,0xD9 };
 
-    JpegImage::JpegImage(BasicIo::AutoPtr io, bool create)
-        : JpegBase(ImageType::jpeg, io, create, blank_, sizeof(blank_))
+    JpegImage::JpegImage(BasicIo::UniquePtr io, bool create)
+        : JpegBase(ImageType::jpeg, std::move(io), create, blank_, sizeof(blank_))
     {
     }
 
@@ -1349,9 +1349,9 @@
         return isJpegType(iIo, advance);
     }
 
-    Image::AutoPtr newJpegInstance(BasicIo::AutoPtr io, bool create)
+    Image::UniquePtr newJpegInstance(BasicIo::UniquePtr io, bool create)
     {
-        Image::AutoPtr image(new JpegImage(io, create));
+        Image::UniquePtr image(new JpegImage(std::move(io), create));
         if (!image->good()) {
             image.reset();
         }
@@ -1375,8 +1375,8 @@
     const char ExvImage::exiv2Id_[] = "Exiv2";
     const byte ExvImage::blank_[] = { 0xff,0x01,'E','x','i','v','2',0xff,0xd9 };
 
-    ExvImage::ExvImage(BasicIo::AutoPtr io, bool create)
-        : JpegBase(ImageType::exv, io, create, blank_, sizeof(blank_))
+    ExvImage::ExvImage(BasicIo::UniquePtr io, bool create)
+        : JpegBase(ImageType::exv, std::move(io), create, blank_, sizeof(blank_))
     {
     }
 
@@ -1402,10 +1402,10 @@
         return isExvType(iIo, advance);
     }
 
-    Image::AutoPtr newExvInstance(BasicIo::AutoPtr io, bool create)
+    Image::UniquePtr newExvInstance(BasicIo::UniquePtr io, bool create)
     {
-        Image::AutoPtr image;
-        image = Image::AutoPtr(new ExvImage(io, create));
+        Image::UniquePtr image;
+        image = Image::UniquePtr(new ExvImage(std::move(io), create));
         if (!image->good()) image.reset();
         return image;
     }
diff -Naur exiv2-0.27.2-Source/src/matroskavideo.cpp exiv2-0.27.2-Source.new/src/matroskavideo.cpp
--- exiv2-0.27.2-Source/src/matroskavideo.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/matroskavideo.cpp	2020-02-12 17:20:20.584539622 +0300
@@ -477,8 +477,8 @@
 
     using namespace Exiv2::Internal;
 
-    MatroskaVideo::MatroskaVideo(BasicIo::AutoPtr io)
-        : Image(ImageType::mkv, mdNone, io)
+    MatroskaVideo::MatroskaVideo(BasicIo::UniquePtr io)
+        : Image(ImageType::mkv, mdNone, std::move(io))
     {
     } // MatroskaVideo::MatroskaVideo
 
@@ -736,9 +736,9 @@
         else              return 0;
     } // MatroskaVideo::findBlockSize
 
-    Image::AutoPtr newMkvInstance(BasicIo::AutoPtr io, bool /*create*/)
+    Image::UniquePtr newMkvInstance(BasicIo::UniquePtr io, bool /*create*/)
     {
-        Image::AutoPtr image(new MatroskaVideo(io));
+        Image::UniquePtr image(new MatroskaVideo(io));
         if (!image->good()) {
             image.reset();
         }
diff -Naur exiv2-0.27.2-Source/src/metadatum.cpp exiv2-0.27.2-Source.new/src/metadatum.cpp
--- exiv2-0.27.2-Source/src/metadatum.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/metadatum.cpp	2020-02-12 16:33:02.853536690 +0300
@@ -41,9 +41,9 @@
     {
     }
 
-    Key::AutoPtr Key::clone() const
+    Key::UniquePtr Key::clone() const
     {
-        return AutoPtr(clone_());
+        return UniquePtr(clone_());
     }
 
     Key& Key::operator=(const Key& /*rhs*/)
diff -Naur exiv2-0.27.2-Source/src/mrwimage.cpp exiv2-0.27.2-Source.new/src/mrwimage.cpp
--- exiv2-0.27.2-Source/src/mrwimage.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/mrwimage.cpp	2020-02-12 17:16:30.008815760 +0300
@@ -45,8 +45,8 @@
 // class member definitions
 namespace Exiv2 {
 
-    MrwImage::MrwImage(BasicIo::AutoPtr io, bool /*create*/)
-        : Image(ImageType::mrw, mdExif | mdIptc | mdXmp, io)
+    MrwImage::MrwImage(BasicIo::UniquePtr io, bool /*create*/)
+        : Image(ImageType::mrw, mdExif | mdIptc | mdXmp, std::move(io))
     {
     } // MrwImage::MrwImage
 
@@ -159,9 +159,9 @@
 
     // *************************************************************************
     // free functions
-    Image::AutoPtr newMrwInstance(BasicIo::AutoPtr io, bool create)
+    Image::UniquePtr newMrwInstance(BasicIo::UniquePtr io, bool create)
     {
-        Image::AutoPtr image(new MrwImage(io, create));
+        Image::UniquePtr image(new MrwImage(std::move(io), create));
         if (!image->good()) {
             image.reset();
         }
diff -Naur exiv2-0.27.2-Source/src/orfimage.cpp exiv2-0.27.2-Source.new/src/orfimage.cpp
--- exiv2-0.27.2-Source/src/orfimage.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/orfimage.cpp	2020-02-12 17:17:33.925067926 +0300
@@ -49,8 +49,8 @@
 
     using namespace Internal;
 
-    OrfImage::OrfImage(BasicIo::AutoPtr io, bool create)
-        : TiffImage(/*ImageType::orf, mdExif | mdIptc | mdXmp,*/ io,create)
+    OrfImage::OrfImage(BasicIo::UniquePtr io, bool create)
+        : TiffImage(/*ImageType::orf, mdExif | mdIptc | mdXmp,*/ std::move(io),create)
     {
         setTypeSupported(ImageType::orf, mdExif | mdIptc | mdXmp);
     } // OrfImage::OrfImage
@@ -195,7 +195,7 @@
                      ed.end());
         }
 
-        std::auto_ptr<TiffHeaderBase> header(new OrfHeader(byteOrder));
+        std::unique_ptr<TiffHeaderBase> header(new OrfHeader(byteOrder));
         return TiffParserWorker::encode(io,
                                         pData,
                                         size,
@@ -210,9 +210,9 @@
 
     // *************************************************************************
     // free functions
-    Image::AutoPtr newOrfInstance(BasicIo::AutoPtr io, bool create)
+    Image::UniquePtr newOrfInstance(BasicIo::UniquePtr io, bool create)
     {
-        Image::AutoPtr image(new OrfImage(io, create));
+        Image::UniquePtr image(new OrfImage(std::move(io), create));
         if (!image->good()) {
             image.reset();
         }
diff -Naur exiv2-0.27.2-Source/src/pgfimage.cpp exiv2-0.27.2-Source.new/src/pgfimage.cpp
--- exiv2-0.27.2-Source/src/pgfimage.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/pgfimage.cpp	2020-02-12 17:18:05.697193210 +0300
@@ -82,8 +82,8 @@
         return result;
     }
 
-    PgfImage::PgfImage(BasicIo::AutoPtr io, bool create)
-            : Image(ImageType::pgf, mdExif | mdIptc| mdXmp | mdComment, io)
+    PgfImage::PgfImage(BasicIo::UniquePtr io, bool create)
+            : Image(ImageType::pgf, mdExif | mdIptc| mdXmp | mdComment, std::move(io))
             , bSwap_(isBigEndianPlatform())
     {
         if (create)
@@ -149,7 +149,7 @@
         if (io_->error()) throw Error(kerFailedToReadImageData);
         if (bufRead != imgData.size_) throw Error(kerInputDataReadFailed);
 
-        Image::AutoPtr image = Exiv2::ImageFactory::open(imgData.pData_, imgData.size_);
+        Image::UniquePtr image = Exiv2::ImageFactory::open(imgData.pData_, imgData.size_);
         image->readMetadata();
         exifData() = image->exifData();
         iptcData() = image->iptcData();
@@ -164,7 +164,7 @@
             throw Error(kerDataSourceOpenFailed, io_->path(), strError());
         }
         IoCloser closer(*io_);
-        BasicIo::AutoPtr tempIo(new MemIo);
+        BasicIo::UniquePtr tempIo(new MemIo);
         assert (tempIo.get() != 0);
 
         doWriteMetadata(*tempIo); // may throw
@@ -198,7 +198,7 @@
         int w, h;
         DataBuf header      = readPgfHeaderStructure(*io_, w, h);
 
-        Image::AutoPtr img  = ImageFactory::create(ImageType::png);
+        Image::UniquePtr img  = ImageFactory::create(ImageType::png);
 
         img->setExifData(exifData_);
         img->setIptcData(iptcData_);
@@ -320,9 +320,9 @@
 
     // *************************************************************************
     // free functions
-    Image::AutoPtr newPgfInstance(BasicIo::AutoPtr io, bool create)
+    Image::UniquePtr newPgfInstance(BasicIo::UniquePtr io, bool create)
     {
-        Image::AutoPtr image(new PgfImage(io, create));
+        Image::UniquePtr image(new PgfImage(std::move(io), create));
         if (!image->good())
         {
             image.reset();
diff -Naur exiv2-0.27.2-Source/src/pngimage.cpp exiv2-0.27.2-Source.new/src/pngimage.cpp
--- exiv2-0.27.2-Source/src/pngimage.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/pngimage.cpp	2020-02-12 17:18:05.054190675 +0300
@@ -72,8 +72,8 @@
 
     using namespace Internal;
 
-    PngImage::PngImage(BasicIo::AutoPtr io, bool create)
-            : Image(ImageType::png, mdExif | mdIptc | mdXmp | mdComment, io)
+    PngImage::PngImage(BasicIo::UniquePtr io, bool create)
+            : Image(ImageType::png, mdExif | mdIptc | mdXmp | mdComment, std::move(io))
     {
         if (create)
         {
@@ -355,7 +355,7 @@
                             if ( parsedBuf.size_ ) {
                                 if ( bExif ) {
                                     // create memio object with the data, then print the structure
-                                    BasicIo::AutoPtr p = BasicIo::AutoPtr(new MemIo(parsedBuf.pData_+6,parsedBuf.size_-6));
+                                    BasicIo::UniquePtr p = BasicIo::UniquePtr(new MemIo(parsedBuf.pData_+6,parsedBuf.size_-6));
                                     printTiffStructure(*p,out,option,depth);
                                 }
                                 if ( bIptc ) {
@@ -507,7 +507,7 @@
             throw Error(kerDataSourceOpenFailed, io_->path(), strError());
         }
         IoCloser closer(*io_);
-        BasicIo::AutoPtr tempIo(new MemIo);
+        BasicIo::UniquePtr tempIo(new MemIo);
         assert (tempIo.get() != 0);
 
         doWriteMetadata(*tempIo); // may throw
@@ -717,9 +717,9 @@
 
     // *************************************************************************
     // free functions
-    Image::AutoPtr newPngInstance(BasicIo::AutoPtr io, bool create)
+    Image::UniquePtr newPngInstance(BasicIo::UniquePtr io, bool create)
     {
-        Image::AutoPtr image(new PngImage(io, create));
+        Image::UniquePtr image(new PngImage(std::move(io), create));
         if (!image->good())
         {
             image.reset();
diff -Naur exiv2-0.27.2-Source/src/preview.cpp exiv2-0.27.2-Source.new/src/preview.cpp
--- exiv2-0.27.2-Source/src/preview.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/preview.cpp	2020-02-12 16:33:03.237539746 +0300
@@ -93,10 +93,10 @@
         virtual ~Loader() {}
 
         //! Loader auto pointer
-        typedef std::auto_ptr<Loader> AutoPtr;
+        typedef std::unique_ptr<Loader> UniquePtr;
 
         //! Create a Loader subclass for requested id
-        static AutoPtr create(PreviewId id, const Image &image);
+        static UniquePtr create(PreviewId id, const Image &image);
 
         //! Check if a preview image with given params exists in the image
         virtual bool valid() const { return valid_; }
@@ -118,7 +118,7 @@
         Loader(PreviewId id, const Image &image);
 
         //! Functions that creates a loader from given parameters
-        typedef AutoPtr (*CreateFunc)(PreviewId id, const Image &image, int parIdx);
+        typedef UniquePtr (*CreateFunc)(PreviewId id, const Image &image, int parIdx);
 
         //! Structure to list possible loaders
         struct LoaderList {
@@ -170,7 +170,7 @@
     };
 
     //! Function to create new LoaderNative
-    Loader::AutoPtr createLoaderNative(PreviewId id, const Image &image, int parIdx);
+    Loader::UniquePtr createLoaderNative(PreviewId id, const Image &image, int parIdx);
 
     //! Loader for Jpeg previews that are not read into ExifData directly
     class LoaderExifJpeg : public Loader {
@@ -204,7 +204,7 @@
     };
 
     //! Function to create new LoaderExifJpeg
-    Loader::AutoPtr createLoaderExifJpeg(PreviewId id, const Image &image, int parIdx);
+    Loader::UniquePtr createLoaderExifJpeg(PreviewId id, const Image &image, int parIdx);
 
     //! Loader for Jpeg previews that are read into ExifData
     class LoaderExifDataJpeg : public Loader {
@@ -237,7 +237,7 @@
     };
 
     //! Function to create new LoaderExifDataJpeg
-    Loader::AutoPtr createLoaderExifDataJpeg(PreviewId id, const Image &image, int parIdx);
+    Loader::UniquePtr createLoaderExifDataJpeg(PreviewId id, const Image &image, int parIdx);
 
     //! Loader for Tiff previews - it can get image data from ExifData or image_.io() as needed
     class LoaderTiff : public Loader {
@@ -274,7 +274,7 @@
     };
 
     //! Function to create new LoaderTiff
-    Loader::AutoPtr createLoaderTiff(PreviewId id, const Image &image, int parIdx);
+    Loader::UniquePtr createLoaderTiff(PreviewId id, const Image &image, int parIdx);
 
     //! Loader for JPEG previews stored in the XMP metadata
     class LoaderXmpJpeg : public Loader {
@@ -297,7 +297,7 @@
     };
 
     //! Function to create new LoaderXmpJpeg
-    Loader::AutoPtr createLoaderXmpJpeg(PreviewId id, const Image &image, int parIdx);
+    Loader::UniquePtr createLoaderXmpJpeg(PreviewId id, const Image &image, int parIdx);
 
 // *****************************************************************************
 // class member definitions
@@ -377,16 +377,16 @@
         { "Image2",    0,                               0   }   // 7
     };
 
-    Loader::AutoPtr Loader::create(PreviewId id, const Image &image)
+    Loader::UniquePtr Loader::create(PreviewId id, const Image &image)
     {
         if (id < 0 || id >= Loader::getNumLoaders())
-            return AutoPtr();
+            return UniquePtr();
 
         if (loaderList_[id].imageMimeType_ &&
             std::string(loaderList_[id].imageMimeType_) != image.mimeType())
-            return AutoPtr();
+            return UniquePtr();
 
-        AutoPtr loader = loaderList_[id].create_(id, image, loaderList_[id].parIdx_);
+        UniquePtr loader = loaderList_[id].create_(id, image, loaderList_[id].parIdx_);
 
         if (loader.get() && !loader->valid()) loader.reset();
         return loader;
@@ -430,9 +430,9 @@
         }
     }
 
-    Loader::AutoPtr createLoaderNative(PreviewId id, const Image &image, int parIdx)
+    Loader::UniquePtr createLoaderNative(PreviewId id, const Image &image, int parIdx)
     {
-        return Loader::AutoPtr(new LoaderNative(id, image, parIdx));
+        return Loader::UniquePtr(new LoaderNative(id, image, parIdx));
     }
 
     PreviewProperties LoaderNative::getProperties() const
@@ -506,7 +506,7 @@
         const DataBuf data = getData();
         if (data.size_ == 0) return false;
         try {
-            Image::AutoPtr image = ImageFactory::open(data.pData_, data.size_);
+            Image::UniquePtr image = ImageFactory::open(data.pData_, data.size_);
             if (image.get() == 0) return false;
             image->readMetadata();
 
@@ -552,9 +552,9 @@
         valid_ = true;
     }
 
-    Loader::AutoPtr createLoaderExifJpeg(PreviewId id, const Image &image, int parIdx)
+    Loader::UniquePtr createLoaderExifJpeg(PreviewId id, const Image &image, int parIdx)
     {
-        return Loader::AutoPtr(new LoaderExifJpeg(id, image, parIdx));
+        return Loader::UniquePtr(new LoaderExifJpeg(id, image, parIdx));
     }
 
     PreviewProperties LoaderExifJpeg::getProperties() const
@@ -597,7 +597,7 @@
         const Exiv2::byte* base = io.mmap();
 
         try {
-            Image::AutoPtr image = ImageFactory::open(base + offset_, size_);
+            Image::UniquePtr image = ImageFactory::open(base + offset_, size_);
             if (image.get() == 0) return false;
             image->readMetadata();
 
@@ -630,9 +630,9 @@
         valid_ = true;
     }
 
-    Loader::AutoPtr createLoaderExifDataJpeg(PreviewId id, const Image &image, int parIdx)
+    Loader::UniquePtr createLoaderExifDataJpeg(PreviewId id, const Image &image, int parIdx)
     {
-        return Loader::AutoPtr(new LoaderExifDataJpeg(id, image, parIdx));
+        return Loader::UniquePtr(new LoaderExifDataJpeg(id, image, parIdx));
     }
 
     PreviewProperties LoaderExifDataJpeg::getProperties() const
@@ -674,7 +674,7 @@
         if (buf.size_ == 0) return false;
 
         try {
-            Image::AutoPtr image = ImageFactory::open(buf.pData_, buf.size_);
+            Image::UniquePtr image = ImageFactory::open(buf.pData_, buf.size_);
             if (image.get() == 0) return false;
             image->readMetadata();
 
@@ -742,9 +742,9 @@
         valid_ = true;
     }
 
-    Loader::AutoPtr createLoaderTiff(PreviewId id, const Image &image, int parIdx)
+    Loader::UniquePtr createLoaderTiff(PreviewId id, const Image &image, int parIdx)
     {
-        return Loader::AutoPtr(new LoaderTiff(id, image, parIdx));
+        return Loader::UniquePtr(new LoaderTiff(id, image, parIdx));
     }
 
     PreviewProperties LoaderTiff::getProperties() const
@@ -865,9 +865,9 @@
         valid_ = true;
     }
 
-    Loader::AutoPtr createLoaderXmpJpeg(PreviewId id, const Image &image, int parIdx)
+    Loader::UniquePtr createLoaderXmpJpeg(PreviewId id, const Image &image, int parIdx)
     {
-        return Loader::AutoPtr(new LoaderXmpJpeg(id, image, parIdx));
+        return Loader::UniquePtr(new LoaderXmpJpeg(id, image, parIdx));
     }
 
     PreviewProperties LoaderXmpJpeg::getProperties() const
@@ -1146,7 +1146,7 @@
         PreviewPropertiesList list;
         // go through the loader table and store all successfully created loaders in the list
         for (PreviewId id = 0; id < Loader::getNumLoaders(); ++id) {
-            Loader::AutoPtr loader = Loader::create(id, image_);
+            Loader::UniquePtr loader = Loader::create(id, image_);
             if (loader.get() && loader->readDimensions()) {
                 PreviewProperties props = loader->getProperties();
                 DataBuf buf             = loader->getData(); // #16 getPreviewImage()
@@ -1160,7 +1160,7 @@
 
     PreviewImage PreviewManager::getPreviewImage(const PreviewProperties &properties) const
     {
-        Loader::AutoPtr loader = Loader::create(properties.id_, image_);
+        Loader::UniquePtr loader = Loader::create(properties.id_, image_);
         DataBuf buf;
         if (loader.get()) {
             buf = loader->getData();
diff -Naur exiv2-0.27.2-Source/src/properties.cpp exiv2-0.27.2-Source.new/src/properties.cpp
--- exiv2-0.27.2-Source/src/properties.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/properties.cpp	2020-02-12 16:33:03.352540661 +0300
@@ -2754,9 +2754,9 @@
         return *this;
     }
 
-    XmpKey::AutoPtr XmpKey::clone() const
+    XmpKey::UniquePtr XmpKey::clone() const
     {
-        return AutoPtr(clone_());
+        return UniquePtr(clone_());
     }
 
     XmpKey* XmpKey::clone_() const
diff -Naur exiv2-0.27.2-Source/src/psdimage.cpp exiv2-0.27.2-Source.new/src/psdimage.cpp
--- exiv2-0.27.2-Source/src/psdimage.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/psdimage.cpp	2020-02-12 17:19:09.631409706 +0300
@@ -123,8 +123,8 @@
 // class member definitions
 namespace Exiv2 {
 
-    PsdImage::PsdImage(BasicIo::AutoPtr io)
-        : Image(ImageType::psd, mdExif | mdIptc | mdXmp, io)
+    PsdImage::PsdImage(BasicIo::UniquePtr io)
+        : Image(ImageType::psd, mdExif | mdIptc | mdXmp, std::move(io))
     {
     } // PsdImage::PsdImage
 
@@ -356,7 +356,7 @@
             throw Error(kerDataSourceOpenFailed, io_->path(), strError());
         }
         IoCloser closer(*io_);
-        BasicIo::AutoPtr tempIo(new MemIo);
+        BasicIo::UniquePtr tempIo(new MemIo);
         assert (tempIo.get() != 0);
 
         doWriteMetadata(*tempIo); // may throw
@@ -689,9 +689,9 @@
 
     // *************************************************************************
     // free functions
-    Image::AutoPtr newPsdInstance(BasicIo::AutoPtr io, bool /*create*/)
+    Image::UniquePtr newPsdInstance(BasicIo::UniquePtr io, bool /*create*/)
     {
-        Image::AutoPtr image(new PsdImage(io));
+        Image::UniquePtr image(new PsdImage(std::move(io)));
         if (!image->good())
         {
             image.reset();
diff -Naur exiv2-0.27.2-Source/src/quicktimevideo.cpp exiv2-0.27.2-Source.new/src/quicktimevideo.cpp
--- exiv2-0.27.2-Source/src/quicktimevideo.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/quicktimevideo.cpp	2020-02-12 17:20:20.630539711 +0300
@@ -607,8 +607,8 @@
 
     using namespace Exiv2::Internal;
 
-    QuickTimeVideo::QuickTimeVideo(BasicIo::AutoPtr io)
-            : Image(ImageType::qtime, mdNone, io)
+    QuickTimeVideo::QuickTimeVideo(BasicIo::UniquePtr io)
+            : Image(ImageType::qtime, mdNone, std::move(io))
             , timeScale_(1)
     {
     } // QuickTimeVideo::QuickTimeVideo
@@ -1394,7 +1394,7 @@
         DataBuf buf(5);
         std::memset(buf.pData_, 0x0, buf.size_);
         buf.pData_[4] = '\0';
-        Exiv2::Value::AutoPtr v = Exiv2::Value::create(Exiv2::xmpSeq);
+        Exiv2::Value::UniquePtr v = Exiv2::Value::create(Exiv2::xmpSeq);
         const TagVocabulary* td;
 
         for (int i = 0; size/4 != 0; size -=4, i++) {
@@ -1630,8 +1630,8 @@
     } // QuickTimeVideo::aspectRatio
 
 
-    Image::AutoPtr newQTimeInstance(BasicIo::AutoPtr io, bool /*create*/) {
-        Image::AutoPtr image(new QuickTimeVideo(io));
+    Image::UniquePtr newQTimeInstance(BasicIo::UniquePtr io, bool /*create*/) {
+        Image::UniquePtr image(new QuickTimeVideo(io));
         if (!image->good()) {
             image.reset();
         }
diff -Naur exiv2-0.27.2-Source/src/rafimage.cpp exiv2-0.27.2-Source.new/src/rafimage.cpp
--- exiv2-0.27.2-Source/src/rafimage.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/rafimage.cpp	2020-02-12 17:18:50.378369329 +0300
@@ -47,8 +47,8 @@
 // class member definitions
 namespace Exiv2 {
 
-    RafImage::RafImage(BasicIo::AutoPtr io, bool /*create*/)
-        : Image(ImageType::raf, mdExif | mdIptc | mdXmp, io)
+    RafImage::RafImage(BasicIo::UniquePtr io, bool /*create*/)
+        : Image(ImageType::raf, mdExif | mdIptc | mdXmp, std::move(io))
     {
     } // RafImage::RafImage
 
@@ -340,9 +340,9 @@
 
     // *************************************************************************
     // free functions
-    Image::AutoPtr newRafInstance(BasicIo::AutoPtr io, bool create)
+    Image::UniquePtr newRafInstance(BasicIo::UniquePtr io, bool create)
     {
-        Image::AutoPtr image(new RafImage(io, create));
+        Image::UniquePtr image(new RafImage(std::move(io), create));
         if (!image->good()) {
             image.reset();
         }
diff -Naur exiv2-0.27.2-Source/src/riffvideo.cpp exiv2-0.27.2-Source.new/src/riffvideo.cpp
--- exiv2-0.27.2-Source/src/riffvideo.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/riffvideo.cpp	2020-02-12 17:20:20.686539821 +0300
@@ -502,8 +502,8 @@
 namespace Exiv2 {
     using namespace Exiv2::Internal;
 
-    RiffVideo::RiffVideo(BasicIo::AutoPtr io)
-            : Image(ImageType::riff, mdNone, io)
+    RiffVideo::RiffVideo(BasicIo::UniquePtr io)
+            : Image(ImageType::riff, mdNone, std::move(io))
     {
     } // RiffVideo::RiffVideo
 
@@ -578,7 +578,7 @@
 
                 if ( equalsRiffTag(chunkId, RIFF_CHUNK_HEADER_EXIF) && option==kpsRecursive ) {
                     // create memio object with the payload, then print the structure
-                    BasicIo::AutoPtr p = BasicIo::AutoPtr(new MemIo(payload.pData_,payload.size_));
+                    BasicIo::UniquePtr p = BasicIo::UniquePtr(new MemIo(payload.pData_,payload.size_));
                     printTiffStructure(*p,out,option,depth);
                 }
 
@@ -1304,9 +1304,9 @@
         xmpData_["Xmp.video.Duration"] = duration; //Duration in number of seconds
     } // RiffVideo::fillDuration
 
-    Image::AutoPtr newRiffInstance(BasicIo::AutoPtr io, bool /*create*/)
+    Image::UniquePtr newRiffInstance(BasicIo::UniquePtr io, bool /*create*/)
     {
-        Image::AutoPtr image(new RiffVideo(io));
+        Image::UniquePtr image(new RiffVideo(io));
         if (!image->good()) {
             image.reset();
         }
diff -Naur exiv2-0.27.2-Source/src/rw2image.cpp exiv2-0.27.2-Source.new/src/rw2image.cpp
--- exiv2-0.27.2-Source/src/rw2image.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/rw2image.cpp	2020-02-12 17:19:43.017468667 +0300
@@ -47,8 +47,8 @@
 
     using namespace Internal;
 
-    Rw2Image::Rw2Image(BasicIo::AutoPtr io)
-        : Image(ImageType::rw2, mdExif | mdIptc | mdXmp, io)
+    Rw2Image::Rw2Image(BasicIo::UniquePtr io)
+        : Image(ImageType::rw2, mdExif | mdIptc | mdXmp, std::move(io))
     {
     } // Rw2Image::Rw2Image
 
@@ -145,7 +145,7 @@
         if (list.size() != 1) return;
         ExifData exifData;
         PreviewImage preview = loader.getPreviewImage(*list.begin());
-        Image::AutoPtr image = ImageFactory::open(preview.pData(), preview.size());
+        Image::UniquePtr image = ImageFactory::open(preview.pData(), preview.size());
         if (image.get() == 0) {
 #ifndef SUPPRESS_WARNINGS
             EXV_WARNING << "Failed to open RW2 preview image.\n";
@@ -244,9 +244,9 @@
 
     // *************************************************************************
     // free functions
-    Image::AutoPtr newRw2Instance(BasicIo::AutoPtr io, bool /*create*/)
+    Image::UniquePtr newRw2Instance(BasicIo::UniquePtr io, bool /*create*/)
     {
-        Image::AutoPtr image(new Rw2Image(io));
+        Image::UniquePtr image(new Rw2Image(std::move(io)));
         if (!image->good()) {
             image.reset();
         }
diff -Naur exiv2-0.27.2-Source/src/tags.cpp exiv2-0.27.2-Source.new/src/tags.cpp
--- exiv2-0.27.2-Source/src/tags.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/tags.cpp	2020-02-12 16:33:03.655543072 +0300
@@ -415,9 +415,9 @@
         return p_->tag_;
     }
 
-    ExifKey::AutoPtr ExifKey::clone() const
+    ExifKey::UniquePtr ExifKey::clone() const
     {
-        return AutoPtr(clone_());
+        return UniquePtr(clone_());
     }
 
     ExifKey* ExifKey::clone_() const
diff -Naur exiv2-0.27.2-Source/src/tgaimage.cpp exiv2-0.27.2-Source.new/src/tgaimage.cpp
--- exiv2-0.27.2-Source/src/tgaimage.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/tgaimage.cpp	2020-02-12 17:20:39.572577236 +0300
@@ -41,8 +41,8 @@
 // class member definitions
 namespace Exiv2 {
 
-    TgaImage::TgaImage(BasicIo::AutoPtr io)
-        : Image(ImageType::tga, mdNone, io)
+    TgaImage::TgaImage(BasicIo::UniquePtr io)
+        : Image(ImageType::tga, mdNone, std::move(io))
     {
     } // TgaImage::TgaImage
 
@@ -125,9 +125,9 @@
 
     // *************************************************************************
     // free functions
-    Image::AutoPtr newTgaInstance(BasicIo::AutoPtr io, bool /*create*/)
+    Image::UniquePtr newTgaInstance(BasicIo::UniquePtr io, bool /*create*/)
     {
-        Image::AutoPtr image(new TgaImage(io));
+        Image::UniquePtr image(new TgaImage(std::move(io)));
         if (!image->good())
         {
             image.reset();
diff -Naur exiv2-0.27.2-Source/src/tiffcomposite_int.cpp exiv2-0.27.2-Source.new/src/tiffcomposite_int.cpp
--- exiv2-0.27.2-Source/src/tiffcomposite_int.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/tiffcomposite_int.cpp	2020-02-12 16:51:07.192607778 +0300
@@ -289,9 +289,9 @@
     {
     }
 
-    TiffComponent::AutoPtr TiffComponent::clone() const
+    TiffComponent::UniquePtr TiffComponent::clone() const
     {
-        return AutoPtr(doClone());
+        return UniquePtr(doClone());
     }
 
     TiffEntry* TiffEntry::doClone() const
@@ -373,7 +373,7 @@
         if (pData_ == 0) size_ = 0;
     }
 
-    void TiffEntryBase::updateValue(Value::AutoPtr value, ByteOrder byteOrder)
+    void TiffEntryBase::updateValue(Value::UniquePtr value, ByteOrder byteOrder)
     {
         if (value.get() == 0) return;
         uint32_t newSize = value->size();
@@ -385,10 +385,10 @@
         }
         size_ = value->copy(pData_, byteOrder);
         assert(size_ == newSize);
-        setValue(value);
+        setValue(std::move(value));
     } // TiffEntryBase::updateValue
 
-    void TiffEntryBase::setValue(Value::AutoPtr value)
+    void TiffEntryBase::setValue(Value::UniquePtr value)
     {
         if (value.get() == 0) return;
         tiffType_ = toTiffType(value->typeId());
@@ -615,7 +615,7 @@
     {
         uint16_t tag = static_cast<uint16_t>(idx / cfg()->tagStep());
         int32_t sz = EXV_MIN(def.size(tag, cfg()->group_), TiffEntryBase::doSize() - idx);
-        TiffComponent::AutoPtr tc = TiffCreator::create(tag, cfg()->group_);
+        TiffComponent::UniquePtr tc = TiffCreator::create(tag, cfg()->group_);
         TiffBinaryElement* tp = dynamic_cast<TiffBinaryElement*>(tc.get());
         // The assertion typically fails if a component is not configured in
         // the TIFF structure table (TiffCreator::tiffTreeStruct_)
@@ -624,22 +624,22 @@
         tp->setData(const_cast<byte*>(pData() + idx), sz);
         tp->setElDef(def);
         tp->setElByteOrder(cfg()->byteOrder_);
-        addChild(tc);
+        addChild(std::move(tc));
         return sz;
     } // TiffBinaryArray::addElement
 
     TiffComponent* TiffComponent::addPath(uint16_t tag,
                                           TiffPath& tiffPath,
                                           TiffComponent* const pRoot,
-                                          TiffComponent::AutoPtr object)
+                                          TiffComponent::UniquePtr object)
     {
-        return doAddPath(tag, tiffPath, pRoot, object);
+        return doAddPath(tag, tiffPath, pRoot, std::move(object));
     } // TiffComponent::addPath
 
     TiffComponent* TiffComponent::doAddPath(uint16_t  /*tag*/,
                                             TiffPath& /*tiffPath*/,
                                             TiffComponent* const /*pRoot*/,
-                                            TiffComponent::AutoPtr /*object*/)
+                                            TiffComponent::UniquePtr /*object*/)
     {
         return this;
     } // TiffComponent::doAddPath
@@ -647,7 +647,7 @@
     TiffComponent* TiffDirectory::doAddPath(uint16_t tag,
                                             TiffPath& tiffPath,
                                             TiffComponent* const pRoot,
-                                            TiffComponent::AutoPtr object)
+                                            TiffComponent::UniquePtr object)
     {
         assert(tiffPath.size() > 1);
         tiffPath.pop();
@@ -673,9 +673,9 @@
             }
         }
         if (tc == 0) {
-            TiffComponent::AutoPtr atc;
+            TiffComponent::UniquePtr atc;
             if (tiffPath.size() == 1 && object.get() != 0) {
-                atc = object;
+                atc = std::move(object);
             }
             else {
                 atc = TiffCreator::create(tpi.extendedTag(), tpi.group());
@@ -687,19 +687,19 @@
             if (tiffPath.size() == 1 && dynamic_cast<TiffSubIfd*>(atc.get()) != 0) return 0;
 
             if (tpi.extendedTag() == Tag::next) {
-                tc = this->addNext(atc);
+                tc = this->addNext(std::move(atc));
             }
             else {
-                tc = this->addChild(atc);
+                tc = this->addChild(std::move(atc));
             }
         }
-        return tc->addPath(tag, tiffPath, pRoot, object);
+        return tc->addPath(tag, tiffPath, pRoot, std::move(object));
     } // TiffDirectory::doAddPath
 
     TiffComponent* TiffSubIfd::doAddPath(uint16_t tag,
                                          TiffPath& tiffPath,
                                          TiffComponent* const pRoot,
-                                         TiffComponent::AutoPtr object)
+                                         TiffComponent::UniquePtr object)
     {
         assert(!tiffPath.empty());
         const TiffPathItem tpi1 = tiffPath.top();
@@ -720,21 +720,21 @@
         }
         if (tc == 0) {
             if (tiffPath.size() == 1 && object.get() != 0) {
-                tc = addChild(object);
+                tc = addChild(std::move(object));
             }
             else {
-                TiffComponent::AutoPtr atc(new TiffDirectory(tpi1.tag(), tpi2.group()));
-                tc = addChild(atc);
+                TiffComponent::UniquePtr atc(new TiffDirectory(tpi1.tag(), tpi2.group()));
+                tc = addChild(std::move(atc));
             }
             setCount(static_cast<uint32_t>(ifds_.size()));
         }
-        return tc->addPath(tag, tiffPath, pRoot, object);
+        return tc->addPath(tag, tiffPath, pRoot, std::move(object));
     } // TiffSubIfd::doAddPath
 
     TiffComponent* TiffMnEntry::doAddPath(uint16_t tag,
                                           TiffPath& tiffPath,
                                           TiffComponent* const pRoot,
-                                          TiffComponent::AutoPtr object)
+                                          TiffComponent::UniquePtr object)
     {
         assert(!tiffPath.empty());
         const TiffPathItem tpi1 = tiffPath.top();
@@ -750,21 +750,21 @@
             mn_ = TiffMnCreator::create(tpi1.tag(), tpi1.group(), mnGroup_);
             assert(mn_);
         }
-        return mn_->addPath(tag, tiffPath, pRoot, object);
+        return mn_->addPath(tag, tiffPath, pRoot, std::move(object));
     } // TiffMnEntry::doAddPath
 
     TiffComponent* TiffIfdMakernote::doAddPath(uint16_t tag,
                                                TiffPath& tiffPath,
                                                TiffComponent* const pRoot,
-                                               TiffComponent::AutoPtr object)
+                                               TiffComponent::UniquePtr object)
     {
-        return ifd_.addPath(tag, tiffPath, pRoot, object);
+        return ifd_.addPath(tag, tiffPath, pRoot, std::move(object));
     }
 
     TiffComponent* TiffBinaryArray::doAddPath(uint16_t tag,
                                               TiffPath& tiffPath,
                                               TiffComponent* const pRoot,
-                                              TiffComponent::AutoPtr object)
+                                              TiffComponent::UniquePtr object)
     {
         pRoot_ = pRoot;
         if (tiffPath.size() == 1) {
@@ -788,39 +788,39 @@
             }
         }
         if (tc == 0) {
-            TiffComponent::AutoPtr atc;
+            TiffComponent::UniquePtr atc;
             if (tiffPath.size() == 1 && object.get() != 0) {
-                atc = object;
+                atc = std::move(object);
             }
             else {
                 atc = TiffCreator::create(tpi.extendedTag(), tpi.group());
             }
             assert(atc.get() != 0);
             assert(tpi.extendedTag() != Tag::next);
-            tc = addChild(atc);
+            tc = addChild(std::move(atc));
             setCount(static_cast<uint32_t>(elements_.size()));
         }
-        return tc->addPath(tag, tiffPath, pRoot, object);
+        return tc->addPath(tag, tiffPath, pRoot, std::move(object));
     } // TiffBinaryArray::doAddPath
 
-    TiffComponent* TiffComponent::addChild(TiffComponent::AutoPtr tiffComponent)
+    TiffComponent* TiffComponent::addChild(TiffComponent::UniquePtr tiffComponent)
     {
-        return doAddChild(tiffComponent);
+        return doAddChild(std::move(tiffComponent));
     } // TiffComponent::addChild
 
-    TiffComponent* TiffComponent::doAddChild(AutoPtr /*tiffComponent*/)
+    TiffComponent* TiffComponent::doAddChild(UniquePtr /*tiffComponent*/)
     {
         return 0;
     } // TiffComponent::doAddChild
 
-    TiffComponent* TiffDirectory::doAddChild(TiffComponent::AutoPtr tiffComponent)
+    TiffComponent* TiffDirectory::doAddChild(TiffComponent::UniquePtr tiffComponent)
     {
         TiffComponent* tc = tiffComponent.release();
         components_.push_back(tc);
         return tc;
     } // TiffDirectory::doAddChild
 
-    TiffComponent* TiffSubIfd::doAddChild(TiffComponent::AutoPtr tiffComponent)
+    TiffComponent* TiffSubIfd::doAddChild(TiffComponent::UniquePtr tiffComponent)
     {
         TiffDirectory* d = dynamic_cast<TiffDirectory*>(tiffComponent.release());
         assert(d);
@@ -828,21 +828,21 @@
         return d;
     } // TiffSubIfd::doAddChild
 
-    TiffComponent* TiffMnEntry::doAddChild(TiffComponent::AutoPtr tiffComponent)
+    TiffComponent* TiffMnEntry::doAddChild(TiffComponent::UniquePtr tiffComponent)
     {
         TiffComponent* tc = 0;
         if (mn_) {
-            tc =  mn_->addChild(tiffComponent);
+            tc =  mn_->addChild(std::move(tiffComponent));
         }
         return tc;
     } // TiffMnEntry::doAddChild
 
-    TiffComponent* TiffIfdMakernote::doAddChild(TiffComponent::AutoPtr tiffComponent)
+    TiffComponent* TiffIfdMakernote::doAddChild(TiffComponent::UniquePtr tiffComponent)
     {
-        return ifd_.addChild(tiffComponent);
+        return ifd_.addChild(std::move(tiffComponent));
     }
 
-    TiffComponent* TiffBinaryArray::doAddChild(TiffComponent::AutoPtr tiffComponent)
+    TiffComponent* TiffBinaryArray::doAddChild(TiffComponent::UniquePtr tiffComponent)
     {
         TiffComponent* tc = tiffComponent.release();
         elements_.push_back(tc);
@@ -850,17 +850,17 @@
         return tc;
     } // TiffBinaryArray::doAddChild
 
-    TiffComponent* TiffComponent::addNext(TiffComponent::AutoPtr tiffComponent)
+    TiffComponent* TiffComponent::addNext(TiffComponent::UniquePtr tiffComponent)
     {
-        return doAddNext(tiffComponent);
+        return doAddNext(std::move(tiffComponent));
     } // TiffComponent::addNext
 
-    TiffComponent* TiffComponent::doAddNext(AutoPtr /*tiffComponent*/)
+    TiffComponent* TiffComponent::doAddNext(UniquePtr /*tiffComponent*/)
     {
         return 0;
     } // TiffComponent::doAddNext
 
-    TiffComponent* TiffDirectory::doAddNext(TiffComponent::AutoPtr tiffComponent)
+    TiffComponent* TiffDirectory::doAddNext(TiffComponent::UniquePtr tiffComponent)
     {
         TiffComponent* tc = 0;
         if (hasNext_) {
@@ -870,18 +870,18 @@
         return tc;
     } // TiffDirectory::doAddNext
 
-    TiffComponent* TiffMnEntry::doAddNext(TiffComponent::AutoPtr tiffComponent)
+    TiffComponent* TiffMnEntry::doAddNext(TiffComponent::UniquePtr tiffComponent)
     {
         TiffComponent* tc = 0;
         if (mn_) {
-            tc = mn_->addNext(tiffComponent);
+            tc = mn_->addNext(std::move(tiffComponent));
         }
         return tc;
     } // TiffMnEntry::doAddNext
 
-    TiffComponent* TiffIfdMakernote::doAddNext(TiffComponent::AutoPtr tiffComponent)
+    TiffComponent* TiffIfdMakernote::doAddNext(TiffComponent::UniquePtr tiffComponent)
     {
-        return ifd_.addNext(tiffComponent);
+        return ifd_.addNext(std::move(tiffComponent));
     }
 
     void TiffComponent::accept(TiffVisitor& visitor)
@@ -1883,19 +1883,19 @@
         return lhs->group() < rhs->group();
     }
 
-    TiffComponent::AutoPtr newTiffEntry(uint16_t tag, IfdId group)
+    TiffComponent::UniquePtr newTiffEntry(uint16_t tag, IfdId group)
     {
-        return TiffComponent::AutoPtr(new TiffEntry(tag, group));
+        return TiffComponent::UniquePtr(new TiffEntry(tag, group));
     }
 
-    TiffComponent::AutoPtr newTiffMnEntry(uint16_t tag, IfdId group)
+    TiffComponent::UniquePtr newTiffMnEntry(uint16_t tag, IfdId group)
     {
-        return TiffComponent::AutoPtr(new TiffMnEntry(tag, group, mnId));
+        return TiffComponent::UniquePtr(new TiffMnEntry(tag, group, mnId));
     }
 
-    TiffComponent::AutoPtr newTiffBinaryElement(uint16_t tag, IfdId group)
+    TiffComponent::UniquePtr newTiffBinaryElement(uint16_t tag, IfdId group)
     {
-        return TiffComponent::AutoPtr(new TiffBinaryElement(tag, group));
+        return TiffComponent::UniquePtr(new TiffBinaryElement(tag, group));
     }
 
 }}                                      // namespace Internal, Exiv2
diff -Naur exiv2-0.27.2-Source/src/tiffcomposite_int.hpp exiv2-0.27.2-Source.new/src/tiffcomposite_int.hpp
--- exiv2-0.27.2-Source/src/tiffcomposite_int.hpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/tiffcomposite_int.hpp	2020-02-12 17:08:24.848892949 +0300
@@ -173,8 +173,8 @@
      */
     class TiffComponent {
     public:
-        //! TiffComponent auto_ptr type
-        typedef std::auto_ptr<TiffComponent> AutoPtr;
+        //! TiffComponent unique_ptr type
+        typedef std::unique_ptr<TiffComponent> UniquePtr;
         //! Container type to hold all metadata
         typedef std::vector<TiffComponent*> Components;
 
@@ -203,20 +203,20 @@
         TiffComponent* addPath(uint16_t tag,
                                TiffPath& tiffPath,
                                TiffComponent* const pRoot,
-                               AutoPtr object =AutoPtr(0));
+                               UniquePtr object =UniquePtr(nullptr));
         /*!
           @brief Add a child to the component. Default is to do nothing.
           @param tiffComponent Auto pointer to the component to add.
           @return Return a pointer to the newly added child element or 0.
          */
-        TiffComponent* addChild(AutoPtr tiffComponent);
+        TiffComponent* addChild(UniquePtr tiffComponent);
         /*!
             @brief Add a "next" component to the component. Default is to do
                    nothing.
             @param tiffComponent Auto pointer to the component to add.
             @return Return a pointer to the newly added "next" element or 0.
          */
-        TiffComponent* addNext(AutoPtr tiffComponent);
+        TiffComponent* addNext(UniquePtr tiffComponent);
         /*!
           @brief Interface to accept visitors (Visitor pattern). Visitors
                  can perform operations on all components of the composite.
@@ -265,7 +265,7 @@
                  without any children). The caller owns this copy and the
                  auto-pointer ensures that it will be deleted.
          */
-        AutoPtr clone() const;
+        UniquePtr clone() const;
         /*!
           @brief Write the IFD data of this component to a binary image.
                  Return the number of bytes written. Components derived from
@@ -321,11 +321,11 @@
         virtual TiffComponent* doAddPath(uint16_t  tag,
                                          TiffPath& tiffPath,
                                          TiffComponent* const pRoot,
-                                         TiffComponent::AutoPtr object);
+                                         TiffComponent::UniquePtr object);
         //! Implements addChild(). The default implementation does nothing.
-        virtual TiffComponent* doAddChild(AutoPtr tiffComponent);
+        virtual TiffComponent* doAddChild(UniquePtr tiffComponent);
         //! Implements addNext(). The default implementation does nothing.
-        virtual TiffComponent* doAddNext(AutoPtr tiffComponent);
+        virtual TiffComponent* doAddNext(UniquePtr tiffComponent);
         //! Implements accept().
         virtual void doAccept(TiffVisitor& visitor) =0;
         //! Implements write().
@@ -445,13 +445,13 @@
 
           Update binary value data and call setValue().
         */
-        void updateValue(Value::AutoPtr value, ByteOrder byteOrder);
+        void updateValue(Value::UniquePtr value, ByteOrder byteOrder);
         /*!
           @brief Set tag value. Takes ownership of the pointer passed in.
 
           Update type, count and the pointer to the value.
         */
-        void setValue(Value::AutoPtr value);
+        void setValue(Value::UniquePtr value);
         //@}
 
         //! @name Accessors
@@ -888,9 +888,9 @@
         virtual TiffComponent* doAddPath(uint16_t tag,
                                          TiffPath& tiffPath,
                                          TiffComponent* const pRoot,
-                                         TiffComponent::AutoPtr object);
-        virtual TiffComponent* doAddChild(TiffComponent::AutoPtr tiffComponent);
-        virtual TiffComponent* doAddNext(TiffComponent::AutoPtr tiffComponent);
+                                         TiffComponent::UniquePtr object);
+        virtual TiffComponent* doAddChild(TiffComponent::UniquePtr tiffComponent);
+        virtual TiffComponent* doAddNext(TiffComponent::UniquePtr tiffComponent);
         virtual void doAccept(TiffVisitor& visitor);
         /*!
           @brief Implements write(). Write the TIFF directory, values and
@@ -1004,8 +1004,8 @@
         virtual TiffComponent* doAddPath(uint16_t tag,
                                          TiffPath& tiffPath,
                                          TiffComponent* const pRoot,
-                                         TiffComponent::AutoPtr object);
-        virtual TiffComponent* doAddChild(TiffComponent::AutoPtr tiffComponent);
+                                         TiffComponent::UniquePtr object);
+        virtual TiffComponent* doAddChild(TiffComponent::UniquePtr tiffComponent);
         virtual void doAccept(TiffVisitor& visitor);
         virtual void doEncode(TiffEncoder& encoder, const Exifdatum* datum);
         /*!
@@ -1089,9 +1089,9 @@
         virtual TiffComponent* doAddPath(uint16_t tag,
                                          TiffPath& tiffPath,
                                          TiffComponent* const pRoot,
-                                         TiffComponent::AutoPtr object);
-        virtual TiffComponent* doAddChild(TiffComponent::AutoPtr tiffComponent);
-        virtual TiffComponent* doAddNext(TiffComponent::AutoPtr tiffComponent);
+                                         TiffComponent::UniquePtr object);
+        virtual TiffComponent* doAddChild(TiffComponent::UniquePtr tiffComponent);
+        virtual TiffComponent* doAddNext(TiffComponent::UniquePtr tiffComponent);
         virtual void doAccept(TiffVisitor& visitor);
         virtual void doEncode(TiffEncoder& encoder, const Exifdatum* datum);
         /*!
@@ -1221,9 +1221,9 @@
         virtual TiffComponent* doAddPath(uint16_t tag,
                                          TiffPath& tiffPath,
                                          TiffComponent* const pRoot,
-                                         TiffComponent::AutoPtr object);
-        virtual TiffComponent* doAddChild(TiffComponent::AutoPtr tiffComponent);
-        virtual TiffComponent* doAddNext(TiffComponent::AutoPtr tiffComponent);
+                                         TiffComponent::UniquePtr object);
+        virtual TiffComponent* doAddChild(TiffComponent::UniquePtr tiffComponent);
+        virtual TiffComponent* doAddNext(TiffComponent::UniquePtr tiffComponent);
         virtual void doAccept(TiffVisitor& visitor);
         /*!
           @brief Implements write(). Write the Makernote header, TIFF directory,
@@ -1435,11 +1435,11 @@
         virtual TiffComponent* doAddPath(uint16_t tag,
                                          TiffPath& tiffPath,
                                          TiffComponent* const pRoot,
-                                         TiffComponent::AutoPtr object);
+                                         TiffComponent::UniquePtr object);
         /*!
           @brief Implements addChild(). Todo: Document it!
          */
-        virtual TiffComponent* doAddChild(TiffComponent::AutoPtr tiffComponent);
+        virtual TiffComponent* doAddChild(TiffComponent::UniquePtr tiffComponent);
         virtual void doAccept(TiffVisitor& visitor);
         virtual void doEncode(TiffEncoder& encoder, const Exifdatum* datum);
         /*!
@@ -1583,83 +1583,83 @@
     bool cmpGroupLt(TiffComponent const* lhs, TiffComponent const* rhs);
 
     //! Function to create and initialize a new TIFF entry
-    TiffComponent::AutoPtr newTiffEntry(uint16_t tag, IfdId group);
+    TiffComponent::UniquePtr newTiffEntry(uint16_t tag, IfdId group);
 
     //! Function to create and initialize a new TIFF makernote entry
-    TiffComponent::AutoPtr newTiffMnEntry(uint16_t tag, IfdId group);
+    TiffComponent::UniquePtr newTiffMnEntry(uint16_t tag, IfdId group);
 
     //! Function to create and initialize a new binary array element
-    TiffComponent::AutoPtr newTiffBinaryElement(uint16_t tag, IfdId group);
+    TiffComponent::UniquePtr newTiffBinaryElement(uint16_t tag, IfdId group);
 
     //! Function to create and initialize a new TIFF directory
     template<IfdId newGroup>
-    TiffComponent::AutoPtr newTiffDirectory(uint16_t tag, IfdId /*group*/)
+    TiffComponent::UniquePtr newTiffDirectory(uint16_t tag, IfdId /*group*/)
     {
-        return TiffComponent::AutoPtr(new TiffDirectory(tag, newGroup));
+        return TiffComponent::UniquePtr(new TiffDirectory(tag, newGroup));
     }
 
     //! Function to create and initialize a new TIFF sub-directory
     template<IfdId newGroup>
-    TiffComponent::AutoPtr newTiffSubIfd(uint16_t tag, IfdId group)
+    TiffComponent::UniquePtr newTiffSubIfd(uint16_t tag, IfdId group)
     {
-        return TiffComponent::AutoPtr(new TiffSubIfd(tag, group, newGroup));
+        return TiffComponent::UniquePtr(new TiffSubIfd(tag, group, newGroup));
     }
 
     //! Function to create and initialize a new binary array entry
     template<const ArrayCfg* arrayCfg, int N, const ArrayDef (&arrayDef)[N]>
-    TiffComponent::AutoPtr newTiffBinaryArray0(uint16_t tag, IfdId group)
+    TiffComponent::UniquePtr newTiffBinaryArray0(uint16_t tag, IfdId group)
     {
         // *& acrobatics is a workaround for a MSVC 7.1 bug
-        return TiffComponent::AutoPtr(
+        return TiffComponent::UniquePtr(
             new TiffBinaryArray(tag, group, arrayCfg, *(&arrayDef), N));
     }
 
     //! Function to create and initialize a new simple binary array entry
     template<const ArrayCfg* arrayCfg>
-    TiffComponent::AutoPtr newTiffBinaryArray1(uint16_t tag, IfdId group)
+    TiffComponent::UniquePtr newTiffBinaryArray1(uint16_t tag, IfdId group)
     {
-        return TiffComponent::AutoPtr(
+        return TiffComponent::UniquePtr(
             new TiffBinaryArray(tag, group, arrayCfg, 0, 0));
     }
 
     //! Function to create and initialize a new complex binary array entry
     template<const ArraySet* arraySet, int N, CfgSelFct cfgSelFct>
-    TiffComponent::AutoPtr newTiffBinaryArray2(uint16_t tag, IfdId group)
+    TiffComponent::UniquePtr newTiffBinaryArray2(uint16_t tag, IfdId group)
     {
-        return TiffComponent::AutoPtr(
+        return TiffComponent::UniquePtr(
             new TiffBinaryArray(tag, group, arraySet, N, cfgSelFct));
     }
 
     //! Function to create and initialize a new TIFF entry for a thumbnail (data)
     template<uint16_t szTag, IfdId szGroup>
-    TiffComponent::AutoPtr newTiffThumbData(uint16_t tag, IfdId group)
+    TiffComponent::UniquePtr newTiffThumbData(uint16_t tag, IfdId group)
     {
-        return TiffComponent::AutoPtr(
+        return TiffComponent::UniquePtr(
             new TiffDataEntry(tag, group, szTag, szGroup));
     }
 
     //! Function to create and initialize a new TIFF entry for a thumbnail (size)
     template<uint16_t dtTag, IfdId dtGroup>
-    TiffComponent::AutoPtr newTiffThumbSize(uint16_t tag, IfdId group)
+    TiffComponent::UniquePtr newTiffThumbSize(uint16_t tag, IfdId group)
     {
-        return TiffComponent::AutoPtr(
+        return TiffComponent::UniquePtr(
             new TiffSizeEntry(tag, group, dtTag, dtGroup));
     }
 
     //! Function to create and initialize a new TIFF entry for image data
     template<uint16_t szTag, IfdId szGroup>
-    TiffComponent::AutoPtr newTiffImageData(uint16_t tag, IfdId group)
+    TiffComponent::UniquePtr newTiffImageData(uint16_t tag, IfdId group)
     {
-        return TiffComponent::AutoPtr(
+        return TiffComponent::UniquePtr(
             new TiffImageEntry(tag, group, szTag, szGroup));
     }
 
     //! Function to create and initialize a new TIFF entry for image data (size)
     template<uint16_t dtTag, IfdId dtGroup>
-    TiffComponent::AutoPtr newTiffImageSize(uint16_t tag, IfdId group)
+    TiffComponent::UniquePtr newTiffImageSize(uint16_t tag, IfdId group)
     {
         // Todo: Same as newTiffThumbSize - consolidate (rename)?
-        return TiffComponent::AutoPtr(
+        return TiffComponent::UniquePtr(
             new TiffSizeEntry(tag, group, dtTag, dtGroup));
     }
 
diff -Naur exiv2-0.27.2-Source/src/tifffwd_int.hpp exiv2-0.27.2-Source.new/src/tifffwd_int.hpp
--- exiv2-0.27.2-Source/src/tifffwd_int.hpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/tifffwd_int.hpp	2020-02-12 16:33:03.933545284 +0300
@@ -102,10 +102,10 @@
     );
     /*!
       @brief Type for a function pointer for a function to create a TIFF component.
-             Use TiffComponent::AutoPtr, it is not used in this declaration only
+             Use TiffComponent::UniquePtr, it is not used in this declaration only
              to reduce dependencies.
      */
-    typedef std::auto_ptr<TiffComponent> (*NewTiffCompFct)(uint16_t tag, IfdId group);
+    typedef std::unique_ptr<TiffComponent> (*NewTiffCompFct)(uint16_t tag, IfdId group);
 
     //! Stack to hold a path from the TIFF root element to a TIFF entry
     typedef std::stack<TiffPathItem> TiffPath;
diff -Naur exiv2-0.27.2-Source/src/tiffimage.cpp exiv2-0.27.2-Source.new/src/tiffimage.cpp
--- exiv2-0.27.2-Source/src/tiffimage.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/tiffimage.cpp	2020-02-12 17:18:50.467369679 +0300
@@ -70,8 +70,8 @@
 
     using namespace Internal;
 
-    TiffImage::TiffImage(BasicIo::AutoPtr io, bool /*create*/)
-        : Image(ImageType::tiff, mdExif | mdIptc | mdXmp, io),
+    TiffImage::TiffImage(BasicIo::UniquePtr io, bool /*create*/)
+        : Image(ImageType::tiff, mdExif | mdIptc | mdXmp, std::move(io)),
           pixelWidth_(0), pixelHeight_(0)
     {
     } // TiffImage::TiffImage
@@ -292,7 +292,7 @@
                      ed.end());
         }
 
-        std::auto_ptr<TiffHeaderBase> header(new TiffHeader(byteOrder));
+        std::unique_ptr<TiffHeaderBase> header(new TiffHeader(byteOrder));
         return TiffParserWorker::encode(io,
                                         pData,
                                         size,
@@ -307,9 +307,9 @@
 
     // *************************************************************************
     // free functions
-    Image::AutoPtr newTiffInstance(BasicIo::AutoPtr io, bool create)
+    Image::UniquePtr newTiffInstance(BasicIo::UniquePtr io, bool create)
     {
-        Image::AutoPtr image(new TiffImage(io, create));
+        Image::UniquePtr image(new TiffImage(std::move(io), create));
         if (!image->good()) {
             image.reset();
         }
diff -Naur exiv2-0.27.2-Source/src/tiffimage_int.cpp exiv2-0.27.2-Source.new/src/tiffimage_int.cpp
--- exiv2-0.27.2-Source/src/tiffimage_int.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/tiffimage_int.cpp	2020-02-12 16:52:08.469876115 +0300
@@ -1552,10 +1552,10 @@
         return key.r_ == root_ && key.g_ == group_;
     }
 
-    TiffComponent::AutoPtr TiffCreator::create(uint32_t extendedTag,
+    TiffComponent::UniquePtr TiffCreator::create(uint32_t extendedTag,
                                                IfdId    group)
     {
-        TiffComponent::AutoPtr tc(0);
+        TiffComponent::UniquePtr tc(nullptr);
         uint16_t tag = static_cast<uint16_t>(extendedTag & 0xffff);
         const TiffGroupStruct* ts = find(tiffGroupStruct_,
                                          TiffGroupStruct::Key(extendedTag, group));
@@ -1606,12 +1606,12 @@
     )
     {
         // Create standard TIFF header if necessary
-        std::auto_ptr<TiffHeaderBase> ph;
+        std::unique_ptr<TiffHeaderBase> ph;
         if (!pHeader) {
-            ph = std::auto_ptr<TiffHeaderBase>(new TiffHeader);
+            ph = std::unique_ptr<TiffHeaderBase>(new TiffHeader);
             pHeader = ph.get();
         }
-        TiffComponent::AutoPtr rootDir = parse(pData, size, root, pHeader);
+        TiffComponent::UniquePtr rootDir = parse(pData, size, root, pHeader);
         if (0 != rootDir.get()) {
             TiffDecoder decoder(exifData,
                                 iptcData,
@@ -1647,7 +1647,7 @@
         assert(pHeader);
         assert(pHeader->byteOrder() != invalidByteOrder);
         WriteMethod writeMethod = wmIntrusive;
-        TiffComponent::AutoPtr parsedTree = parse(pData, size, root, pHeader);
+        TiffComponent::UniquePtr parsedTree = parse(pData, size, root, pHeader);
         PrimaryGroups primaryGroups;
         findPrimaryGroups(primaryGroups, parsedTree.get());
         if (0 != parsedTree.get()) {
@@ -1664,7 +1664,7 @@
             if (!encoder.dirty()) writeMethod = wmNonIntrusive;
         }
         if (writeMethod == wmIntrusive) {
-            TiffComponent::AutoPtr createdTree = TiffCreator::create(root, ifdIdNotSet);
+            TiffComponent::UniquePtr createdTree = TiffCreator::create(root, ifdIdNotSet);
             if (0 != parsedTree.get()) {
                 // Copy image tags from the original image to the composite
                 TiffCopier copier(createdTree.get(), root, pHeader, &primaryGroups);
@@ -1682,7 +1682,7 @@
             encoder.add(createdTree.get(), parsedTree.get(), root);
             // Write binary representation from the composite tree
             DataBuf header = pHeader->write();
-            BasicIo::AutoPtr tempIo(new MemIo);
+            BasicIo::UniquePtr tempIo(new MemIo);
             assert(tempIo.get() != 0);
             IoWrapper ioWrapper(*tempIo, header.pData_, header.size_, pOffsetWriter);
             uint32_t imageIdx(uint32_t(-1));
@@ -1706,18 +1706,18 @@
         return writeMethod;
     } // TiffParserWorker::encode
 
-    TiffComponent::AutoPtr TiffParserWorker::parse(
+    TiffComponent::UniquePtr TiffParserWorker::parse(
         const byte*              pData,
               uint32_t           size,
               uint32_t           root,
               TiffHeaderBase*    pHeader
     )
     {
-        if (pData == 0 || size == 0) return TiffComponent::AutoPtr(0);
+        if (pData == 0 || size == 0) return TiffComponent::UniquePtr(nullptr);
         if (!pHeader->read(pData, size) || pHeader->offset() >= size) {
             throw Error(kerNotAnImage, "TIFF");
         }
-        TiffComponent::AutoPtr rootDir = TiffCreator::create(root, ifdIdNotSet);
+        TiffComponent::UniquePtr rootDir = TiffCreator::create(root, ifdIdNotSet);
         if (0 != rootDir.get()) {
             rootDir->setStart(pData + pHeader->offset());
             TiffRwState state(pHeader->byteOrder(), 0);
diff -Naur exiv2-0.27.2-Source/src/tiffimage_int.hpp exiv2-0.27.2-Source.new/src/tiffimage_int.hpp
--- exiv2-0.27.2-Source/src/tiffimage_int.hpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/tiffimage_int.hpp	2020-02-12 16:43:54.628581452 +0300
@@ -256,7 +256,7 @@
                  component creation function. If the pointer that is returned
                  is 0, then the TIFF entry should be ignored.
         */
-        static std::auto_ptr<TiffComponent> create(uint32_t extendedTag,
+        static std::unique_ptr<TiffComponent> create(uint32_t extendedTag,
                                                    IfdId    group);
         /*!
           @brief Get the path, i.e., a list of extended tag and group pairs, from
@@ -349,7 +349,7 @@
                            composite structure. If \em pData is 0 or \em size
                            is 0, the return value is a 0 pointer.
          */
-        static std::auto_ptr<TiffComponent> parse(
+        static std::unique_ptr<TiffComponent> parse(
             const byte*              pData,
                   uint32_t           size,
                   uint32_t           root,
diff -Naur exiv2-0.27.2-Source/src/tiffvisitor_int.cpp exiv2-0.27.2-Source.new/src/tiffvisitor_int.cpp
--- exiv2-0.27.2-Source/src/tiffvisitor_int.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/tiffvisitor_int.cpp	2020-02-12 16:54:45.101548474 +0300
@@ -213,11 +213,11 @@
         assert(object != 0);
 
         if (pHeader_->isImageTag(object->tag(), object->group(), pPrimaryGroups_)) {
-            TiffComponent::AutoPtr clone = object->clone();
+            TiffComponent::UniquePtr clone = object->clone();
             // Assumption is that the corresponding TIFF entry doesn't exist
             TiffPath tiffPath;
             TiffCreator::getPath(tiffPath, object->tag(), object->group(), root_);
-            pRoot_->addPath(object->tag(), tiffPath, pRoot_, clone);
+            pRoot_->addPath(object->tag(), tiffPath, pRoot_, std::move(clone));
 #ifdef EXIV2_DEBUG_MESSAGES
             ExifKey key(object->tag(), groupName(object->group()));
             std::cerr << "Copied " << key << "\n";
@@ -573,7 +573,7 @@
             irbKey.setIdx(pos->idx());
         }
         if (rawIptc.size_ != 0 && (del || pos == exifData_.end())) {
-            Value::AutoPtr value = Value::create(unsignedLong);
+            Value::UniquePtr value = Value::create(unsignedLong);
             DataBuf buf;
             if (rawIptc.size_ % 4 != 0) {
                 // Pad the last unsignedLong value with 0s
@@ -597,7 +597,7 @@
             irbBuf = Photoshop::setIptcIrb(irbBuf.pData_, irbBuf.size_, iptcData_);
             exifData_.erase(pos);
             if (irbBuf.size_ != 0) {
-                Value::AutoPtr value = Value::create(unsignedByte);
+                Value::UniquePtr value = Value::create(unsignedByte);
                 value->read(irbBuf.pData_, irbBuf.size_, invalidByteOrder);
                 Exifdatum iptcDatum(irbKey, value.get());
                 exifData_.add(iptcDatum);
@@ -627,7 +627,7 @@
         }
         if (!xmpPacket.empty()) {
             // Set the XMP Exif tag to the new value
-            Value::AutoPtr value = Value::create(unsignedByte);
+            Value::UniquePtr value = Value::create(unsignedByte);
             value->read(reinterpret_cast<const byte*>(&xmpPacket[0]),
                         static_cast<long>(xmpPacket.size()),
                         invalidByteOrder);
@@ -1294,10 +1294,10 @@
                 return;
             }
             uint16_t tag = getUShort(p, byteOrder());
-            TiffComponent::AutoPtr tc = TiffCreator::create(tag, object->group());
+            TiffComponent::UniquePtr tc = TiffCreator::create(tag, object->group());
             if (tc.get()) {
                 tc->setStart(p);
-                object->addChild(tc);
+                object->addChild(std::move(tc));
             } else {
                EXV_WARNING << "Unable to handle tag " << tag << ".\n";
             }
@@ -1312,7 +1312,7 @@
 #endif
                 return;
             }
-            TiffComponent::AutoPtr tc(0);
+            TiffComponent::UniquePtr tc(nullptr);
             uint32_t next = getLong(p, byteOrder());
             if (next) {
                 tc = TiffCreator::create(Tag::next, object->group());
@@ -1332,7 +1332,7 @@
                     return;
                 }
                 tc->setStart(pData_ + baseOffset() + next);
-                object->addNext(tc);
+                object->addNext(std::move(tc));
             }
         } // object->hasNext()
 
@@ -1371,10 +1371,10 @@
                     break;
                 }
                 // If there are multiple dirs, group is incremented for each
-                TiffComponent::AutoPtr td(new TiffDirectory(object->tag(),
+                TiffComponent::UniquePtr td(new TiffDirectory(object->tag(),
                                                             static_cast<IfdId>(object->newGroup_ + i)));
                 td->setStart(pData_ + baseOffset() + offset);
-                object->addChild(td);
+                object->addChild(std::move(td));
             }
         }
 #ifndef SUPPRESS_WARNINGS
@@ -1553,7 +1553,7 @@
                 size = 0;
             }
         }
-        Value::AutoPtr v = Value::create(typeId);
+        Value::UniquePtr v = Value::create(typeId);
         enforce(v.get() != NULL, kerCorruptedMetadata);
         if ( !isize ) {
             v->read(pData, size, byteOrder());
@@ -1567,7 +1567,7 @@
             ::free(buffer);
         }
 
-        object->setValue(v);
+        object->setValue(std::move(v));
         object->setData(pData, size);
         object->setOffset(offset);
         object->setIdx(nextIdx(object->group()));
@@ -1661,11 +1661,11 @@
         ByteOrder bo = object->elByteOrder();
         if (bo == invalidByteOrder) bo = byteOrder();
         TypeId typeId = toTypeId(object->elDef()->tiffType_, object->tag(), object->group());
-        Value::AutoPtr v = Value::create(typeId);
+        Value::UniquePtr v = Value::create(typeId);
         enforce(v.get() != NULL, kerCorruptedMetadata);
         v->read(pData, size, bo);
 
-        object->setValue(v);
+        object->setValue(std::move(v));
         object->setOffset(0);
         object->setIdx(nextIdx(object->group()));
 
diff -Naur exiv2-0.27.2-Source/src/value.cpp exiv2-0.27.2-Source.new/src/value.cpp
--- exiv2-0.27.2-Source/src/value.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/value.cpp	2020-02-12 16:33:04.221547574 +0300
@@ -97,71 +97,71 @@
         return *this;
     }
 
-    Value::AutoPtr Value::create(TypeId typeId)
+    Value::UniquePtr Value::create(TypeId typeId)
     {
-        AutoPtr value;
+        UniquePtr value;
         switch (typeId) {
         case invalidTypeId:
         case signedByte:
         case unsignedByte:
-            value = AutoPtr(new DataValue(typeId));
+            value = UniquePtr(new DataValue(typeId));
             break;
         case asciiString:
-            value = AutoPtr(new AsciiValue);
+            value = UniquePtr(new AsciiValue);
             break;
         case unsignedShort:
-            value = AutoPtr(new ValueType<uint16_t>);
+            value = UniquePtr(new ValueType<uint16_t>);
             break;
         case unsignedLong:
         case tiffIfd:
-            value = AutoPtr(new ValueType<uint32_t>(typeId));
+            value = UniquePtr(new ValueType<uint32_t>(typeId));
             break;
         case unsignedRational:
-            value = AutoPtr(new ValueType<URational>);
+            value = UniquePtr(new ValueType<URational>);
             break;
         case undefined:
-            value = AutoPtr(new DataValue);
+            value = UniquePtr(new DataValue);
             break;
         case signedShort:
-            value = AutoPtr(new ValueType<int16_t>);
+            value = UniquePtr(new ValueType<int16_t>);
             break;
         case signedLong:
-            value = AutoPtr(new ValueType<int32_t>);
+            value = UniquePtr(new ValueType<int32_t>);
             break;
         case signedRational:
-            value = AutoPtr(new ValueType<Rational>);
+            value = UniquePtr(new ValueType<Rational>);
             break;
         case tiffFloat:
-            value = AutoPtr(new ValueType<float>);
+            value = UniquePtr(new ValueType<float>);
             break;
         case tiffDouble:
-            value = AutoPtr(new ValueType<double>);
+            value = UniquePtr(new ValueType<double>);
             break;
         case string:
-            value = AutoPtr(new StringValue);
+            value = UniquePtr(new StringValue);
             break;
         case date:
-            value = AutoPtr(new DateValue);
+            value = UniquePtr(new DateValue);
             break;
         case time:
-            value = AutoPtr(new TimeValue);
+            value = UniquePtr(new TimeValue);
             break;
         case comment:
-            value = AutoPtr(new CommentValue);
+            value = UniquePtr(new CommentValue);
             break;
         case xmpText:
-            value = AutoPtr(new XmpTextValue);
+            value = UniquePtr(new XmpTextValue);
             break;
         case xmpBag:
         case xmpSeq:
         case xmpAlt:
-            value = AutoPtr(new XmpArrayValue(typeId));
+            value = UniquePtr(new XmpArrayValue(typeId));
             break;
         case langAlt:
-            value = AutoPtr(new LangAltValue);
+            value = UniquePtr(new LangAltValue);
             break;
         default:
-            value = AutoPtr(new DataValue(typeId));
+            value = UniquePtr(new DataValue(typeId));
             break;
         }
         return value;
@@ -723,9 +723,9 @@
         return 0;
     }
 
-    XmpTextValue::AutoPtr XmpTextValue::clone() const
+    XmpTextValue::UniquePtr XmpTextValue::clone() const
     {
-        return AutoPtr(clone_());
+        return UniquePtr(clone_());
     }
 
     long XmpTextValue::size() const
@@ -793,9 +793,9 @@
         return 0;
     }
 
-    XmpArrayValue::AutoPtr XmpArrayValue::clone() const
+    XmpArrayValue::UniquePtr XmpArrayValue::clone() const
     {
-        return AutoPtr(clone_());
+        return UniquePtr(clone_());
     }
 
     long XmpArrayValue::count() const
@@ -867,9 +867,9 @@
         return 0;
     }
 
-    LangAltValue::AutoPtr LangAltValue::clone() const
+    LangAltValue::UniquePtr LangAltValue::clone() const
     {
-        return AutoPtr(clone_());
+        return UniquePtr(clone_());
     }
 
     long LangAltValue::count() const
diff -Naur exiv2-0.27.2-Source/src/webpimage.cpp exiv2-0.27.2-Source.new/src/webpimage.cpp
--- exiv2-0.27.2-Source/src/webpimage.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/webpimage.cpp	2020-02-12 17:21:16.548653657 +0300
@@ -71,8 +71,8 @@
       enforce(!iIo.error(), err);
     }
 
-    WebPImage::WebPImage(BasicIo::AutoPtr io)
-    : Image(ImageType::webp, mdNone, io)
+    WebPImage::WebPImage(BasicIo::UniquePtr io)
+    : Image(ImageType::webp, mdNone, std::move(io))
     {
     } // WebPImage::WebPImage
 
@@ -126,7 +126,7 @@
             throw Error(kerDataSourceOpenFailed, io_->path(), strError());
         }
         IoCloser closer(*io_);
-        BasicIo::AutoPtr tempIo(new MemIo);
+        BasicIo::UniquePtr tempIo(new MemIo);
         assert (tempIo.get() != 0);
 
         doWriteMetadata(*tempIo); // may throw
@@ -465,7 +465,7 @@
 
                 if ( equalsWebPTag(chunkId, WEBP_CHUNK_HEADER_EXIF) && option==kpsRecursive ) {
                     // create memio object with the payload, then print the structure
-                    BasicIo::AutoPtr p = BasicIo::AutoPtr(new MemIo(payload.pData_,payload.size_));
+                    BasicIo::UniquePtr p = BasicIo::UniquePtr(new MemIo(payload.pData_,payload.size_));
                     printTiffStructure(*p,out,option,depth);
                 }
 
@@ -718,9 +718,9 @@
 
     /* =========================================== */
 
-    Image::AutoPtr newWebPInstance(BasicIo::AutoPtr io, bool /*create*/)
+    Image::UniquePtr newWebPInstance(BasicIo::UniquePtr io, bool /*create*/)
     {
-        Image::AutoPtr image(new WebPImage(io));
+        Image::UniquePtr image(new WebPImage(std::move(io)));
         if (!image->good()) {
             image.reset();
         }
diff -Naur exiv2-0.27.2-Source/src/xmp.cpp exiv2-0.27.2-Source.new/src/xmp.cpp
--- exiv2-0.27.2-Source/src/xmp.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/xmp.cpp	2020-02-12 17:04:07.397861869 +0300
@@ -94,7 +94,7 @@
                    const XMP_OptionBits& opt);
 
     //! Make an XMP key from a schema namespace and property path
-    Exiv2::XmpKey::AutoPtr makeXmpKey(const std::string& schemaNs,
+    Exiv2::XmpKey::UniquePtr makeXmpKey(const std::string& schemaNs,
                                       const std::string& propPath);
 #endif // EXV_HAVE_XMP_TOOLKIT
 
@@ -128,8 +128,8 @@
         Impl& operator=(const Impl& rhs);              //!< Assignment
 
         // DATA
-        XmpKey::AutoPtr key_;                          //!< Key
-        Value::AutoPtr  value_;                        //!< Value
+        XmpKey::UniquePtr key_;                          //!< Key
+        Value::UniquePtr  value_;                        //!< Value
     };
 
     Xmpdatum::Impl::Impl(const XmpKey& key, const Value* pValue)
@@ -256,9 +256,9 @@
         return p_->value_.get() == 0 ? Rational(-1, 1) : p_->value_->toRational(n);
     }
 
-    Value::AutoPtr Xmpdatum::getValue() const
+    Value::UniquePtr Xmpdatum::getValue() const
     {
-        return p_->value_.get() == 0 ? Value::AutoPtr(0) : p_->value_->clone();
+        return p_->value_.get() == 0 ? Value::UniquePtr(nullptr) : p_->value_->clone();
     }
 
     const Value& Xmpdatum::value() const
@@ -624,10 +624,10 @@
                 }
                 continue;
             }
-            XmpKey::AutoPtr key = makeXmpKey(schemaNs, propPath);
+            XmpKey::UniquePtr key = makeXmpKey(schemaNs, propPath);
             if (XMP_ArrayIsAltText(opt)) {
                 // Read Lang Alt property
-                LangAltValue::AutoPtr val(new LangAltValue);
+                LangAltValue::UniquePtr val(new LangAltValue);
                 XMP_Index count = meta.CountArrayItems(schemaNs.c_str(), propPath.c_str());
                 while (count-- > 0) {
                     // Get the text
@@ -674,7 +674,7 @@
                 }
                 if (simpleArray) {
                     // Read the array into an XmpArrayValue
-                    XmpArrayValue::AutoPtr val(new XmpArrayValue(arrayValueTypeId(opt)));
+                    XmpArrayValue::UniquePtr val(new XmpArrayValue(arrayValueTypeId(opt)));
                     XMP_Index count = meta.CountArrayItems(schemaNs.c_str(), propPath.c_str());
                     while (count-- > 0) {
                         iter.Next(&schemaNs, &propPath, &propValue, &opt);
@@ -685,7 +685,7 @@
                     continue;
                 }
             }
-            XmpTextValue::AutoPtr val(new XmpTextValue);
+            XmpTextValue::UniquePtr val(new XmpTextValue);
             if (   XMP_PropIsStruct(opt)
                 || XMP_PropIsArray(opt)) {
                 // Create a metadatum with only XMP options
@@ -975,7 +975,7 @@
     {}
 #endif // EXIV2_DEBUG_MESSAGES
 
-    Exiv2::XmpKey::AutoPtr makeXmpKey(const std::string& schemaNs,
+    Exiv2::XmpKey::UniquePtr makeXmpKey(const std::string& schemaNs,
                                       const std::string& propPath)
     {
         std::string property;
@@ -989,7 +989,7 @@
         if (prefix.empty()) {
             throw Exiv2::Error(Exiv2::kerNoPrefixForNamespace, propPath, schemaNs);
         }
-        return Exiv2::XmpKey::AutoPtr(new Exiv2::XmpKey(prefix, property));
+        return Exiv2::XmpKey::UniquePtr(new Exiv2::XmpKey(prefix, property));
     } // makeXmpKey
 #endif // EXV_HAVE_XMP_TOOLKIT
 
diff -Naur exiv2-0.27.2-Source/src/xmpsidecar.cpp exiv2-0.27.2-Source.new/src/xmpsidecar.cpp
--- exiv2-0.27.2-Source/src/xmpsidecar.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/src/xmpsidecar.cpp	2020-02-12 17:18:50.513369861 +0300
@@ -51,8 +51,8 @@
 namespace Exiv2 {
 
 
-    XmpSidecar::XmpSidecar(BasicIo::AutoPtr io, bool create)
-        : Image(ImageType::xmp, mdXmp, io)
+    XmpSidecar::XmpSidecar(BasicIo::UniquePtr io, bool create)
+        : Image(ImageType::xmp, mdXmp, std::move(io))
     {
         if (create) {
             if (io_->open() == 0) {
@@ -183,7 +183,7 @@
             if (xmpPacket_.substr(0, 5)  != "<?xml") {
                 xmpPacket_ = xmlHeader + xmpPacket_ + xmlFooter;
             }
-            BasicIo::AutoPtr tempIo(new MemIo);
+            BasicIo::UniquePtr tempIo(new MemIo);
             assert(tempIo.get() != 0);
             // Write XMP packet
             if (   tempIo->write(reinterpret_cast<const byte*>(xmpPacket_.data()),
@@ -197,9 +197,9 @@
 
     // *************************************************************************
     // free functions
-    Image::AutoPtr newXmpInstance(BasicIo::AutoPtr io, bool create)
+    Image::UniquePtr newXmpInstance(BasicIo::UniquePtr io, bool create)
     {
-        Image::AutoPtr image(new XmpSidecar(io, create));
+        Image::UniquePtr image(new XmpSidecar(std::move(io), create));
         if (!image->good()) {
             image.reset();
         }
diff -Naur exiv2-0.27.2-Source/unitTests/test_XmpKey.cpp exiv2-0.27.2-Source.new/unitTests/test_XmpKey.cpp
--- exiv2-0.27.2-Source/unitTests/test_XmpKey.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/unitTests/test_XmpKey.cpp	2020-02-12 16:33:04.471549561 +0300
@@ -71,7 +71,7 @@
 TEST_F(AXmpKey, canBeCloned)
 {
     XmpKey key(expectedPrefix, expectedProperty);
-    XmpKey::AutoPtr clonedKey = key.clone();
+    XmpKey::UniquePtr clonedKey = key.clone();
     checkValidity(*clonedKey);
 }
 
diff -Naur exiv2-0.27.2-Source/xmpsdk/src/MD5.cpp exiv2-0.27.2-Source.new/xmpsdk/src/MD5.cpp
--- exiv2-0.27.2-Source/xmpsdk/src/MD5.cpp	2019-07-29 09:33:07.000000000 +0300
+++ exiv2-0.27.2-Source.new/xmpsdk/src/MD5.cpp	2020-02-12 17:51:08.086367158 +0300
@@ -153,7 +153,7 @@
 void
 MD5Transform(UWORD32 buf[4], UWORD32 const in[16])
 {
-	register UWORD32 a, b, c, d;
+	UWORD32 a, b, c, d;
 
 	a = buf[0];
 	b = buf[1];
